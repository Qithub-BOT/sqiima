[
  {
    "rendered_body": "<p>Docker初心者です。<br>\n色々と試行錯誤を繰り返していると、いつの間にかDockerコンテナや、Dockerイメージがたまってきます。<br>\n<a href=\"https://camo.qiitausercontent.com/8f4d08a884026828ef3fc15d4b388886245aa161/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3531383338342f37383765653035332d303164382d353632322d613036332d3638356639303933633332392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F518384%2F787ee053-01d8-5622-a063-685f9093c329.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5ed3f046a405693533ac2e5a09cc3dab\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/518384/787ee053-01d8-5622-a063-685f9093c329.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F518384%2F787ee053-01d8-5622-a063-685f9093c329.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=156bf81bf648e70edd4d2fbd8b345ca8 1x\" loading=\"lazy\"></a><br>\n１個ずつイメージを削除するのも、面倒なので下記のコマンドで一括削除をメモします。</p>\n\n<h1>\n<span id=\"コンテナー一括停止削除\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%83%BC%E4%B8%80%E6%8B%AC%E5%81%9C%E6%AD%A2%E5%89%8A%E9%99%A4\"><i class=\"fa fa-link\"></i></a>コンテナー一括停止＆削除</h1>\n\n<p>Linuxコンテナーだと、下記コマンドでできますが、<br>\n<code>docker rm `docker ps -a -q`<br>\n</code><br>\nWindowsコンテナーの場合は違うコマンドでやります。<br>\n実行中のコンテナーあると、削除できないので、先にコンテナーをすべて停止します</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Docker</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">for</span> <span class=\"o\">/</span><span class=\"n\">f</span> <span class=\"o\">%</span><span class=\"no\">T</span> <span class=\"nf\">IN</span> <span class=\"o\">(</span><span class=\"err\">'</span><span class=\"n\">docker</span> <span class=\"n\">ps</span> <span class=\"o\">-</span><span class=\"n\">a</span><span class=\"err\">'</span><span class=\"o\">)</span> <span class=\"no\">DO</span> <span class=\"n\">docker</span> <span class=\"n\">stop</span> <span class=\"o\">%</span><span class=\"no\">T</span>\n<span class=\"k\">for</span> <span class=\"o\">/</span><span class=\"n\">f</span> <span class=\"o\">%</span><span class=\"no\">T</span> <span class=\"nf\">IN</span> <span class=\"o\">(</span><span class=\"err\">'</span><span class=\"n\">docker</span> <span class=\"n\">ps</span> <span class=\"o\">-</span><span class=\"n\">a</span><span class=\"err\">'</span><span class=\"o\">)</span> <span class=\"no\">DO</span> <span class=\"n\">docker</span> <span class=\"n\">rm</span> <span class=\"o\">%</span><span class=\"no\">T</span>\n</code></pre></div>\n</div>\n\n<p>実行してみます<br>\n<a href=\"https://camo.qiitausercontent.com/59891f65770993ee143d0e4916082bf37e6132e0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3531383338342f62306232313633352d653561662d396164392d323237632d3664366266626661633235612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F518384%2Fb0b21635-e5af-9ad9-227c-6d6bfbfac25a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=485dbb4860ad8f6d2ad0da5eaa35d4fc\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/518384/b0b21635-e5af-9ad9-227c-6d6bfbfac25a.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F518384%2Fb0b21635-e5af-9ad9-227c-6d6bfbfac25a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f96caf2553adec1f3b949ab84d3f9c55 1x\" loading=\"lazy\"></a><br>\n「docker ps -a」で確認してみます<br>\n<a href=\"https://camo.qiitausercontent.com/6a4a7e3e0099bb51ef9fc6b2769989848dac2039/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3531383338342f32356131663466382d383631302d643439652d666332392d3634653236306639373437372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F518384%2F25a1f4f8-8610-d49e-fc29-64e260f97477.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=83b0808e1481adb0e8ccdbaba45b7e50\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/518384/25a1f4f8-8610-d49e-fc29-64e260f97477.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F518384%2F25a1f4f8-8610-d49e-fc29-64e260f97477.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=8e4a9da0be65ba9b646db1cf5de8422e 1x\" loading=\"lazy\"></a><br>\nすっきり！</p>\n\n<h1>\n<span id=\"イメージ一括削除\" class=\"fragment\"></span><a href=\"#%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E4%B8%80%E6%8B%AC%E5%89%8A%E9%99%A4\"><i class=\"fa fa-link\"></i></a>イメージ一括削除</h1>\n\n<p>イメージのサイズが大きくて、いっぱいたまるとやばくなります。<br>\n<a href=\"https://camo.qiitausercontent.com/643809627d58f3a55dd655311c008b17a6979f7b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3531383338342f36363966376365662d366366322d643065382d653136322d3636653661646233626237312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F518384%2F669f7cef-6cf2-d0e8-e162-66e6adb3bb71.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9fe0bc9a0f8dfd27eba0e356e839cfdc\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/518384/669f7cef-6cf2-d0e8-e162-66e6adb3bb71.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F518384%2F669f7cef-6cf2-d0e8-e162-66e6adb3bb71.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7bd1264eb599f64d87dcdc3bed700232 1x\" loading=\"lazy\"></a></p>\n\n<p>下記コマンドでイメージを一括削除します（ご慎重に）</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>for /f %T IN ('docker images --format \"{{.ID}}\"') DO docker rmi %T\n</code></pre></div></div>\n",
    "body": "\n#\nDocker初心者です。\n色々と試行錯誤を繰り返していると、いつの間にかDockerコンテナや、Dockerイメージがたまってきます。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/518384/787ee053-01d8-5622-a063-685f9093c329.png)\n１個ずつイメージを削除するのも、面倒なので下記のコマンドで一括削除をメモします。\n\n#コンテナー一括停止＆削除\nLinuxコンテナーだと、下記コマンドでできますが、\n```docker rm `docker ps -a -q`\n```\nWindowsコンテナーの場合は違うコマンドでやります。\n実行中のコンテナーあると、削除できないので、先にコンテナーをすべて停止します\n\n```java:Docker\nfor /f %T IN ('docker ps -a') DO docker stop %T\nfor /f %T IN ('docker ps -a') DO docker rm %T\n```\n実行してみます\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/518384/b0b21635-e5af-9ad9-227c-6d6bfbfac25a.png)\n「docker ps -a」で確認してみます\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/518384/25a1f4f8-8610-d49e-fc29-64e260f97477.png)\nすっきり！\n\n#イメージ一括削除\nイメージのサイズが大きくて、いっぱいたまるとやばくなります。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/518384/669f7cef-6cf2-d0e8-e162-66e6adb3bb71.png)\n\n下記コマンドでイメージを一括削除します（ご慎重に）\n\n```\nfor /f %T IN ('docker images --format \"{{.ID}}\"') DO docker rmi %T\n```\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:58:22+09:00",
    "group": null,
    "id": "6c8e8d052cf042ed4c38",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Docker",
        "versions": []
      },
      {
        "name": "windowsContainer",
        "versions": []
      }
    ],
    "title": "Dockerコマンドで Windowsコンテナー一括削除",
    "updated_at": "2021-08-25T13:58:22+09:00",
    "url": "https://qiita.com/idoudougirl/items/6c8e8d052cf042ed4c38",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": null,
      "id": "idoudougirl",
      "items_count": 4,
      "linkedin_id": "",
      "location": "東京",
      "name": "dou dou",
      "organization": "",
      "permanent_id": 518384,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/518384/5077ab5a1b131dedc9039bb7d7d75ddcf249c32e/large.png?1629863221",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>下記のようなエラーが出たので、対処法を自分用にメモ。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>An exception occurred applying plugin request [id: 'com.android.application']\nFailed to apply plugin 'com.android.internal.application'.\n</code></pre></div></div>\n\n<h1>\n<span id=\"対処法\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E5%87%A6%E6%B3%95\"><i class=\"fa fa-link\"></i></a>対処法</h1>\n\n<p>File→Project Strutcure→Gradle Settingsから、Gradle JDKを11に変更。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/28d4617520b9ff09c9dc9899eea334e1031768b0/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3639343736322f36643039323062642d613035372d333634342d303634632d3230643337356465663865632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F694762%2F6d0920bd-a057-3644-064c-20d375def8ec.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4568fd1fe16623d36e581890053ef1e8\" width=\"80%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/694762/6d0920bd-a057-3644-064c-20d375def8ec.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F694762%2F6d0920bd-a057-3644-064c-20d375def8ec.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4476fead7c5ae5fd770b4c9d92dc8c1d 1x\" loading=\"lazy\"></a></p>\n",
    "body": "# はじめに\n\n下記のようなエラーが出たので、対処法を自分用にメモ。\n\n```\nAn exception occurred applying plugin request [id: 'com.android.application']\nFailed to apply plugin 'com.android.internal.application'.\n```\n\n# 対処法\nFile→Project Strutcure→Gradle Settingsから、Gradle JDKを11に変更。\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/694762/6d0920bd-a057-3644-064c-20d375def8ec.png\" width=\"80%\">\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:56:51+09:00",
    "group": null,
    "id": "26a4b1fafc648b8524e7",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "AndroidStudio",
        "versions": []
      }
    ],
    "title": "【Android Studio】com.android.applicationエラーが出たときの対処法",
    "updated_at": "2021-08-25T13:56:51+09:00",
    "url": "https://qiita.com/nakashimaakio/items/26a4b1fafc648b8524e7",
    "user": {
      "description": "Android App Developer",
      "facebook_id": "",
      "followees_count": 4,
      "followers_count": 1,
      "github_login_name": "nakashimaakio",
      "id": "nakashimaakio",
      "items_count": 43,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 694762,
      "profile_image_url": "https://avatars1.githubusercontent.com/u/16346840?v=4",
      "team_only": false,
      "twitter_screen_name": "Naka_inc",
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p>.NET Frameworkのライフサイクルを忘れるため、自分のためにまとめ</p>\n\n<h2>\n<span id=\"ライフサイクルリリース\" class=\"fragment\"></span><a href=\"#%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9\"><i class=\"fa fa-link\"></i></a>ライフサイクルリリース</h2>\n\n<table>\n<thead>\n<tr>\n<th>Version</th>\n<th>開始日</th>\n<th>終了日</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.NET Framework 4.8</td>\n<td>2019年4月18日</td>\n<td>OSのライフサイクルポリシーに従う</td>\n</tr>\n<tr>\n<td>.NET Framework 4.7.2</td>\n<td>2018年4月30日</td>\n<td>OSのライフサイクルポリシーに従う</td>\n</tr>\n<tr>\n<td>.NET Framework 4.7.1</td>\n<td>2017年10月17日</td>\n<td>OSのライフサイクルポリシーに従う</td>\n</tr>\n<tr>\n<td>.NET Framework 4.7</td>\n<td>2017年4月11日</td>\n<td>OSのライフサイクルポリシーに従う</td>\n</tr>\n<tr>\n<td>.NET Framework 4.6.2</td>\n<td>2016年8月2日</td>\n<td>OSのライフサイクルポリシーに従う</td>\n</tr>\n<tr>\n<td>.NET Framework 4.6.1</td>\n<td>2015年11月30日</td>\n<td>2022年4月26</td>\n</tr>\n<tr>\n<td>.NET Framework 4.6</td>\n<td>2015年7月29日</td>\n<td>2022年4月26</td>\n</tr>\n<tr>\n<td>.NET Framework 4.5.2</td>\n<td>2014年5月5日</td>\n<td>2022年4月26</td>\n</tr>\n<tr>\n<td>.NET Framework 4.5.1</td>\n<td>2014年1月15日</td>\n<td>2016年1月12</td>\n</tr>\n<tr>\n<td>.NET Framework 4.5</td>\n<td>2012年10月9日</td>\n<td>2016年1月12</td>\n</tr>\n<tr>\n<td>.NET Framework 3.5</td>\n<td>Service Pack 1 2007年11月19日</td>\n<td>2029年1月9日</td>\n</tr>\n<tr>\n<td>.NET Framework 3.0</td>\n<td>2006年11月21日</td>\n<td>2011年7月12</td>\n</tr>\n<tr>\n<td>.NET Framework 2.0</td>\n<td>2006年2月17日</td>\n<td>2011年7月12</td>\n</tr>\n</tbody>\n</table>\n\n<p>テクニカルサポートおよびセキュリティアップデートを継続して受けるために、2022年4月26日までに.NET Framework 4.6.2以降へのインプレースアップデートを完了する必要がある。</p>\n\n<h2>\n<span id=\"net-framework-462以降のバージョンを使用するにはアプリケーションを再コンパイル再構築する必要があるか\" class=\"fragment\"></span><a href=\"#net-framework-462%E4%BB%A5%E9%99%8D%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%86%8D%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E5%86%8D%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B%E5%BF%85%E8%A6%81%E3%81%8C%E3%81%82%E3%82%8B%E3%81%8B\"><i class=\"fa fa-link\"></i></a>.NET Framework 4.6.2以降のバージョンを使用するには、アプリケーションを再コンパイル／再構築する必要があるか？</h2>\n\n<p>.NET Framework 4.6.2以降のバージョンは、.NET Framework 4、4.5、4.5.1、4.5.2、4.6、4.6.1の上に互換性のあるインプレース・アップデート。つまり、以前の.NET 4.xバージョンで構築されたアプリケーションは、.NET Framework 4.6.2以降のバージョンで引き続き動作する。これらのバージョンをターゲットにしてアプリケーションを再コンパイルする必要はない。</p>\n\n<h2>\n<span id=\"net-framework-462以降の変更点\" class=\"fragment\"></span><a href=\"#net-framework-462%E4%BB%A5%E9%99%8D%E3%81%AE%E5%A4%89%E6%9B%B4%E7%82%B9\"><i class=\"fa fa-link\"></i></a>.NET Framework 4.6.2以降の変更点</h2>\n\n<p>.NET Framework 4.6.2以降のバージョンには、以前の.NETバージョンとの完全な互換性がない、変更/修正がいくつかあるか、気にする必要はない。</p>\n\n<h2>\n<span id=\"どのバージョンを使えばよいか\" class=\"fragment\"></span><a href=\"#%E3%81%A9%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%BF%E3%81%88%E3%81%B0%E3%82%88%E3%81%84%E3%81%8B\"><i class=\"fa fa-link\"></i></a>どのバージョンを使えばよいか？</h2>\n\n<p>パフォーマンス、信頼性、およびセキュリティを得るために.NET Framework 4.8へのアップグレードがおすすめ。</p>\n\n<h2>\n<span id=\"参考文献\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><i class=\"fa fa-link\"></i></a>参考文献</h2>\n\n<p><a href=\"https://docs.microsoft.com/ja-jp/lifecycle/faq/dotnet-framework\" rel=\"nofollow noopener\" target=\"_blank\">What is the Microsoft Lifecycle Policy for the .NET Framework?<br>\n</a></p>\n",
    "body": "\n\n.NET Frameworkのライフサイクルを忘れるため、自分のためにまとめ\n\n## ライフサイクルリリース\n|Version|開始日|終了日|\n|-|-|-|\n|.NET Framework 4.8\t|2019年4月18日|OSのライフサイクルポリシーに従う|\n|.NET Framework 4.7.2|2018年4月30日|OSのライフサイクルポリシーに従う|\n|.NET Framework 4.7.1|2017年10月17日|OSのライフサイクルポリシーに従う|\n|.NET Framework 4.7|2017年4月11日|OSのライフサイクルポリシーに従う|\n|.NET Framework 4.6.2|2016年8月2日|OSのライフサイクルポリシーに従う|\n|.NET Framework 4.6.1|2015年11月30日|2022年4月26|\n|.NET Framework 4.6\t|2015年7月29日|2022年4月26|\n|.NET Framework 4.5.2|2014年5月5日|2022年4月26|\n|.NET Framework 4.5.1|2014年1月15日|2016年1月12|\n|.NET Framework 4.5|2012年10月9日|2016年1月12|\n|.NET Framework 3.5| Service Pack 1 2007年11月19日|2029年1月9日|\n|.NET Framework 3.0|2006年11月21日|2011年7月12|\n|.NET Framework 2.0|2006年2月17日|2011年7月12|\n\nテクニカルサポートおよびセキュリティアップデートを継続して受けるために、2022年4月26日までに.NET Framework 4.6.2以降へのインプレースアップデートを完了する必要がある。\n\n## .NET Framework 4.6.2以降のバージョンを使用するには、アプリケーションを再コンパイル／再構築する必要があるか？\n.NET Framework 4.6.2以降のバージョンは、.NET Framework 4、4.5、4.5.1、4.5.2、4.6、4.6.1の上に互換性のあるインプレース・アップデート。つまり、以前の.NET 4.xバージョンで構築されたアプリケーションは、.NET Framework 4.6.2以降のバージョンで引き続き動作する。これらのバージョンをターゲットにしてアプリケーションを再コンパイルする必要はない。\n\n## .NET Framework 4.6.2以降の変更点\n.NET Framework 4.6.2以降のバージョンには、以前の.NETバージョンとの完全な互換性がない、変更/修正がいくつかあるか、気にする必要はない。\n\n## どのバージョンを使えばよいか？\nパフォーマンス、信頼性、およびセキュリティを得るために.NET Framework 4.8へのアップグレードがおすすめ。\n\n## 参考文献\n[What is the Microsoft Lifecycle Policy for the .NET Framework?\n](https://docs.microsoft.com/ja-jp/lifecycle/faq/dotnet-framework)\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:56:23+09:00",
    "group": null,
    "id": "0fc5c68a93e709d37b9e",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": ".NETFramework",
        "versions": []
      }
    ],
    "title": "2021.08 時点の .NET Framework のライフサイクル まとめ",
    "updated_at": "2021-08-25T13:57:31+09:00",
    "url": "https://qiita.com/yoshio-kinoshita/items/0fc5c68a93e709d37b9e",
    "user": {
      "description": "人事パッケージベンダーのプロダクトマネージャー兼プログラマー",
      "facebook_id": "",
      "followees_count": 7,
      "followers_count": 2,
      "github_login_name": null,
      "id": "yoshio-kinoshita",
      "items_count": 1,
      "linkedin_id": "",
      "location": "",
      "name": "yoshio kinoshita",
      "organization": "",
      "permanent_id": 64048,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/64048/profile-images/1473696460",
      "team_only": false,
      "twitter_screen_name": "yoshio0440",
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p>'''TypeScript:app.tsx<br>\nimport {AppProps} from 'next/app'<br>\nimport Layout from '../components/layout'<br>\nimport '../styles/globals.css'</p>\n\n<p>const MyApp: React.FC = ({ Component, pageProps }): JSX.Element =&gt; {<br>\n  return (<br>\n    <br>\n      <br>\n    <br>\n  );<br>\n}<br>\nexport default MyApp;<br>\n'''</p>\n",
    "body": "\n\n\n'''TypeScript:app.tsx\nimport {AppProps} from 'next/app'\nimport Layout from '../components/layout'\nimport '../styles/globals.css'\n\nconst MyApp: React.FC<AppProps> = ({ Component, pageProps }): JSX.Element => {\n  return (\n    <Layout>\n      <Component {...pageProps} />\n    </Layout>\n  );\n}\nexport default MyApp;\n'''\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:46:58+09:00",
    "group": null,
    "id": "8b6c550f45d8a8fe701e",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "TypeScript",
        "versions": []
      },
      {
        "name": "next.js",
        "versions": []
      }
    ],
    "title": "Next.jsの_app.tsx",
    "updated_at": "2021-08-25T13:46:58+09:00",
    "url": "https://qiita.com/S_watana/items/8b6c550f45d8a8fe701e",
    "user": {
      "description": "JavaScriptの推移を観察しています。",
      "facebook_id": "opepelab",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": "opepelab",
      "id": "S_watana",
      "items_count": 1,
      "linkedin_id": "/s-watanabe-a25157205/",
      "location": "東京都",
      "name": "S watana",
      "organization": "",
      "permanent_id": 1728080,
      "profile_image_url": "https://avatars.githubusercontent.com/u/75829584?v=4",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": "https://ssg-snowy.vercel.app/"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"状況\" class=\"fragment\"></span><a href=\"#%E7%8A%B6%E6%B3%81\"><i class=\"fa fa-link\"></i></a>状況</h1>\n\n<p><code>docker run</code>したらエラーが出て、コンテナはステータスは<code>Created</code>で立ち上がりません。</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\">\n<div class=\"code-lang\"><span class=\"bold\">エラー文</span></div>\n<div class=\"highlight\"><pre><code><span class=\"go\">docker: Error response from daemon: driver failed programming external connectivity on endpoint\n</span></code></pre></div>\n</div>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<ul>\n<li>Ubuntu version \"18.04.4 LTS (Bionic Beaver)\"</li>\n<li>Docker version 19.03.12</li>\n</ul>\n\n<h1>\n<span id=\"対応\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E5%BF%9C\"><i class=\"fa fa-link\"></i></a>対応</h1>\n\n<p>エラー文で検索すると、</p>\n\n<blockquote>\n<p>Properly shutting docker down before restart worked for me</p>\n</blockquote>\n\n<p>と言っている人がいたので、dockerを再起動した後に<code>docker run</code>したら上手く動きました。</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\">\n<div class=\"code-lang\"><span class=\"bold\">dockerの再起動</span></div>\n<div class=\"highlight\"><pre><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nv\">$ </span>service docker restart\n</code></pre></div>\n</div>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<p><qiita-embed-ogp src=\"https://github.com/docker/for-win/issues/2722\"></qiita-embed-ogp></p>\n",
    "body": "#状況\n`docker run`したらエラーが出て、コンテナはステータスは`Created`で立ち上がりません。\n\n```terminal:エラー文\ndocker: Error response from daemon: driver failed programming external connectivity on endpoint\n```\n\n#環境\n* Ubuntu version \"18.04.4 LTS (Bionic Beaver)\"\n* Docker version 19.03.12\n\n#対応\nエラー文で検索すると、\n\n>Properly shutting docker down before restart worked for me\n\nと言っている人がいたので、dockerを再起動した後に`docker run`したら上手く動きました。\n\n```terminal:dockerの再起動\n$ $ service docker restart\n```\n\n#参考\n\nhttps://github.com/docker/for-win/issues/2722\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:40:19+09:00",
    "group": null,
    "id": "1958c21234e829fb542a",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Docker",
        "versions": []
      },
      {
        "name": "エラー対処",
        "versions": []
      }
    ],
    "title": "docker: Error response from daemon: driver failed programming external connectivity on endpointの対応",
    "updated_at": "2021-08-25T13:40:19+09:00",
    "url": "https://qiita.com/gaEoni/items/1958c21234e829fb542a",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 5,
      "followers_count": 1,
      "github_login_name": "gaEoni",
      "id": "gaEoni",
      "items_count": 2,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 664069,
      "profile_image_url": "https://avatars0.githubusercontent.com/u/49236942?v=4",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": null
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p>Apache だと、.htaccess に記述する方法があります。詳しくは以下の記事にて</p>\n\n<p><qiita-embed-ogp src=\"https://qiita.com/katzueno/items/675865c2ee6d55755e87\"></qiita-embed-ogp></p>\n\n<p>さて、Nginx な Concrete CMS (concrete5) の場合はどうでしょうか？<br>\nNginx だと Conf に直接書き込む必要があり root 権限が必要です。</p>\n\n<p>僕がよく使っている Config は Ansible にまとめてあります。<br>\n<a href=\"https://github.com/concrete5cojp/ansible-c5-ma/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/concrete5cojp/ansible-c5-ma/</a></p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>server {\n\n# 省略\n## server_name やログなど\n\n## サブディレクトリの場合は location や rewrite 部分のパスを書き換えるのを忘れずに\n\n## 基本は Basic 認証オフなので、変数のデフォをオフに設定\n        set $auth_basic off\n\n## ここで /login 配下は on に設定\n\n        location /login {\n            set $auth_basic on\n            index index.php index.html index.htm;\n            if (!-e $request_filename) {\n                rewrite ^ /index.php last;\n            }\n        }\n\n# 省略\n\n# php-fpm に送る記述\n## 他の表記にしているのなら合わせてください。パスの変更なども忘れずに。\n\n        location ~ \\.php($|/) {\n            index index.php index.html;\n            fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n            include fastcgi_params;\n            fastcgi_index index.php;\n            fastcgi_param URI $uri;\n            fastcgi_param SERVER_NAME $host;\n            fastcgi_param REQUEST_METHOD $request_method;\n            fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n            fastcgi_read_timeout 300;\n            fastcgi_ignore_headers Expires Cache-Control;\n            fastcgi_intercept_errors on;\n            fastcgi_pass unix:/var/run/php-fpm.sock;\n        }\n\n# Basic 認証設定\n## .htpasswd の保存場所が違ったら書き換えてください\n\n    auth_basic $auth_basic;\n        auth_basic_user_file /var/www/html/.htpasswd;\n\n}\n\n</code></pre></div></div>\n\n<p>以上</p>\n",
    "body": "\nApache だと、.htaccess に記述する方法があります。詳しくは以下の記事にて\n\nhttps://qiita.com/katzueno/items/675865c2ee6d55755e87\n\nさて、Nginx な Concrete CMS (concrete5) の場合はどうでしょうか？\nNginx だと Conf に直接書き込む必要があり root 権限が必要です。\n\n僕がよく使っている Config は Ansible にまとめてあります。\nhttps://github.com/concrete5cojp/ansible-c5-ma/\n\n\n```\nserver {\n\n# 省略\n## server_name やログなど\n\n## サブディレクトリの場合は location や rewrite 部分のパスを書き換えるのを忘れずに\n\n## 基本は Basic 認証オフなので、変数のデフォをオフに設定\n        set $auth_basic off\n\n## ここで /login 配下は on に設定\n\n        location /login {\n            set $auth_basic on\n            index index.php index.html index.htm;\n            if (!-e $request_filename) {\n                rewrite ^ /index.php last;\n            }\n        }\n\n# 省略\n\n# php-fpm に送る記述\n## 他の表記にしているのなら合わせてください。パスの変更なども忘れずに。\n\n        location ~ \\.php($|/) {\n\t        index index.php index.html;\n\t        fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n\t        include fastcgi_params;\n\t        fastcgi_index index.php;\n\t        fastcgi_param URI $uri;\n\t        fastcgi_param SERVER_NAME $host;\n\t        fastcgi_param REQUEST_METHOD $request_method;\n\t        fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n\t        fastcgi_read_timeout 300;\n\t        fastcgi_ignore_headers Expires Cache-Control;\n\t        fastcgi_intercept_errors on;\n\t        fastcgi_pass unix:/var/run/php-fpm.sock;\n        }\n\n# Basic 認証設定\n## .htpasswd の保存場所が違ったら書き換えてください\n\n    auth_basic $auth_basic;\n        auth_basic_user_file /var/www/html/.htpasswd;\n\n}\n\n```\n\n以上\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:36:17+09:00",
    "group": null,
    "id": "b6b28d12c4105b4c133d",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "nginx",
        "versions": []
      },
      {
        "name": "concrete5",
        "versions": []
      },
      {
        "name": "Basic認証",
        "versions": []
      },
      {
        "name": "ConcreteCMS",
        "versions": []
      }
    ],
    "title": "Nginx で特定パスだけ Basic 認証をかける (Concrete CMS ログインページ等)",
    "updated_at": "2021-08-25T13:36:50+09:00",
    "url": "https://qiita.com/katzueno/items/b6b28d12c4105b4c133d",
    "user": {
      "description": "concrete5 Japan コミュニティリーダー。コンクリートファイブジャパン株式会社の CCO。YokosoNews で日本を英語で世界に発信。元々はロスでインディー映画制作やエンタメ雑誌の編集。",
      "facebook_id": "",
      "followees_count": 7,
      "followers_count": 68,
      "github_login_name": "katzueno",
      "id": "katzueno",
      "items_count": 145,
      "linkedin_id": "katz515",
      "location": "Nagoya, Japan",
      "name": "Katz Ueno",
      "organization": "concrete5 Japan, Inc.",
      "permanent_id": 44367,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/44367/profile-images/1523621042",
      "team_only": false,
      "twitter_screen_name": "katzueno",
      "website_url": "http://katzueno.com"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>TruffleをDockerのUbuntu環境にインストールしようとしたら、エラーが発生してインストールできなかったので、<br>\n解決策をメモ。</p>\n\n<h1>\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h1>\n\n<p><code>npm install</code>をrootユーザーで実施していたため、権限エラーが出ていました。<br>\nrootユーザーを許可して解決。</p>\n\n<h1>\n<span id=\"現象\" class=\"fragment\"></span><a href=\"#%E7%8F%BE%E8%B1%A1\"><i class=\"fa fa-link\"></i></a>現象</h1>\n\n<p><a href=\"https://www.trufflesuite.com/docs/truffle/getting-started/installation\" rel=\"nofollow noopener\" target=\"_blank\">Truffleの公式</a>通りに<code>npm install -g truffle</code>を実行すると、下記エラーが出て、インストールに失敗しました。</p>\n\n<h3>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h3>\n\n<p>Docker: 20.10.8<br>\nDocker上のUbuntu: 20.04</p>\n\n<h3>\n<span id=\"エラー\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>エラー</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>&gt; node-gyp-build\nsh: 1: node-gyp-build: Permission denied\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.1.2 (node_modules/truffle/node_modules/chokidar/node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: iso-constants@0.1.2 (node_modules/truffle/node_modules/iso-constants):\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: iso-constants@0.1.2 install: `node build.js &gt; index.browser.js`\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: spawn ENOENT\nnpm ERR! code ELIFECYCLE\nnpm ERR! syscall spawn\nnpm ERR! file sh\nnpm ERR! errno ENOENT\nnpm ERR! bufferutil@4.0.3 install: `node-gyp-build`\nnpm ERR! spawn ENOENT\nnpm ERR!\nnpm ERR! Failed at the bufferutil@4.0.3 install script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /root/.npm/_logs/2021-08-12T07_36_52_669Z-debug.log\n</code></pre></div></div>\n\n<h1>\n<span id=\"解決策\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E7%AD%96\"><i class=\"fa fa-link\"></i></a>解決策</h1>\n\n<p>下記コマンドでrootユーザーでのインストールを許可して、<br>\n再度<code>npm install -g truffle</code>を実行するとインストールに成功。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>npm config set unsafe-perm true\n</code></pre></div></div>\n\n<p>デフォルトだと<code>unsafe-perm</code>の値がfalseになっているそうです。</p>\n\n<p>※上記以外にも<code>npm install</code>のオプションに<code>--unsafe-perm</code>を付けて実行する手もあるようです。<br>\n　安全面を考えると一律rootユーザーでのインストールを許可するより<br>\n　一時的に許可する方が良さそうです。<br>\n　が、今回はローカルで勉強用にいじるTruffle環境を作っているだけなので、試していません。<br>\n※そもそも論で<code>npm install</code>は本来rootユーザーではなく、別途ユーザーを作成して実行するべきなのかも？（調べきれていません。。。）</p>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<p>・【docker】npm installしようとしてnode-gyp: Permission deniedエラー<br>\n<a href=\"https://hatolabo.com/programming/docker%E3%81%A7npm-install%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%A6node-gyp-permission-denied%E3%82%A8%E3%83%A9%E3%83%BC\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://hatolabo.com/programming/docker%E3%81%A7npm-install%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%A6node-gyp-permission-denied%E3%82%A8%E3%83%A9%E3%83%BC</a></p>\n\n<p>以上ですー。</p>\n",
    "body": "# はじめに\nTruffleをDockerのUbuntu環境にインストールしようとしたら、エラーが発生してインストールできなかったので、\n解決策をメモ。\n\n# 結論\n`npm install`をrootユーザーで実施していたため、権限エラーが出ていました。\nrootユーザーを許可して解決。\n\n# 現象\n[Truffleの公式](https://www.trufflesuite.com/docs/truffle/getting-started/installation)通りに`npm install -g truffle`を実行すると、下記エラーが出て、インストールに失敗しました。\n\n### 環境\nDocker: 20.10.8\nDocker上のUbuntu: 20.04\n\n### エラー\n\n```\n> node-gyp-build\nsh: 1: node-gyp-build: Permission denied\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.1.2 (node_modules/truffle/node_modules/chokidar/node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: iso-constants@0.1.2 (node_modules/truffle/node_modules/iso-constants):\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: iso-constants@0.1.2 install: `node build.js > index.browser.js`\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: spawn ENOENT\nnpm ERR! code ELIFECYCLE\nnpm ERR! syscall spawn\nnpm ERR! file sh\nnpm ERR! errno ENOENT\nnpm ERR! bufferutil@4.0.3 install: `node-gyp-build`\nnpm ERR! spawn ENOENT\nnpm ERR!\nnpm ERR! Failed at the bufferutil@4.0.3 install script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /root/.npm/_logs/2021-08-12T07_36_52_669Z-debug.log\n```\n\n# 解決策\n下記コマンドでrootユーザーでのインストールを許可して、\n再度`npm install -g truffle`を実行するとインストールに成功。\n\n```\nnpm config set unsafe-perm true\n```\n\nデフォルトだと`unsafe-perm`の値がfalseになっているそうです。\n\n※上記以外にも`npm install`のオプションに`--unsafe-perm`を付けて実行する手もあるようです。\n　安全面を考えると一律rootユーザーでのインストールを許可するより\n　一時的に許可する方が良さそうです。\n　が、今回はローカルで勉強用にいじるTruffle環境を作っているだけなので、試していません。\n※そもそも論で`npm install`は本来rootユーザーではなく、別途ユーザーを作成して実行するべきなのかも？（調べきれていません。。。）\n\n# 参考\n・【docker】npm installしようとしてnode-gyp: Permission deniedエラー\nhttps://hatolabo.com/programming/docker%E3%81%A7npm-install%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%A6node-gyp-permission-denied%E3%82%A8%E3%83%A9%E3%83%BC\n\n以上ですー。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:30:24+09:00",
    "group": null,
    "id": "dedfbecb1a077045247e",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Ubuntu",
        "versions": []
      },
      {
        "name": "npm",
        "versions": []
      },
      {
        "name": "root",
        "versions": []
      },
      {
        "name": "Docker",
        "versions": []
      },
      {
        "name": "truffle",
        "versions": []
      }
    ],
    "title": "Truffleのインストールに失敗する",
    "updated_at": "2021-08-25T13:30:24+09:00",
    "url": "https://qiita.com/oishii_pg_gohan/items/dedfbecb1a077045247e",
    "user": {
      "description": "おいしいごはんとプログラミング。  \r\n躓いたところをmemo!!",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": null,
      "id": "oishii_pg_gohan",
      "items_count": 2,
      "linkedin_id": "",
      "location": "",
      "name": "おいしい ごはん",
      "organization": "",
      "permanent_id": 1770163,
      "profile_image_url": "https://secure.gravatar.com/avatar/0b2ba6a06b6a68c9ae407bca2942a837",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p>備忘録。使い方や知ったことについて書きますが詳細説明は省くことがあります。</p>\n\n<hr>\n\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p><a href=\"https://konvajs.org/\" rel=\"nofollow noopener\" target=\"_blank\">konva</a>という2Dグラフィックを描くことができるライブラリをreactの書き方ができるようしたのがreact-konvaライブラリです。今回は導入と基本的な書き方を書いていきます。</p>\n\n<h4>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h4>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\"></th>\n<th style=\"text-align: center\">version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\">React</td>\n<td style=\"text-align: center\">17.0.2</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">Konva</td>\n<td style=\"text-align: center\">17.0.2-5</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">react-konva</td>\n<td style=\"text-align: center\">8.1.3</td>\n</tr>\n</tbody>\n</table>\n\n<p>reactのtypescriptのテンプレートから作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>npx create-react-app --template typescript myapp\n</code></pre></div></div>\n\n<h1>\n<span id=\"導入\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5\"><i class=\"fa fa-link\"></i></a>導入</h1>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code># npm の場合\nnpm install react-konva konva --save\n# yarnの場合\nyarn add react-konva konva\n</code></pre></div></div>\n\n<h1>\n<span id=\"概念\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E5%BF%B5\"><i class=\"fa fa-link\"></i></a>概念</h1>\n\n<p>ここでは説明しません。<br>\n知りたい場合はほかの記事やkonvaについて調べてください。</p>\n\n<h1>\n<span id=\"基本的な使い方\" class=\"fragment\"></span><a href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9\"><i class=\"fa fa-link\"></i></a>基本的な使い方</h1>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Stage</span><span class=\"p\">,</span> <span class=\"nx\">Layer</span><span class=\"p\">,</span> <span class=\"nx\">Rect</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-konva</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Stage</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Layer</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Rect</span> <span class=\"nx\">fill</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">red</span><span class=\"dl\">'</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">300</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">200</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/Layer</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/Stage</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/249a1bf071a697a6cffc96a2d059ce3796af715e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f313839343538362f65373836623532312d393035662d623966392d326261612d6337633835383466656234332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1894586%2Fe786b521-905f-b9f9-2baa-c7c8584feb43.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8c7302754915bd08798ac0d754fbec82\" alt=\"スクリーンショット (64).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1894586/e786b521-905f-b9f9-2baa-c7c8584feb43.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1894586%2Fe786b521-905f-b9f9-2baa-c7c8584feb43.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=a4792aa52a755779bc4f7b6d54895397 1x\" loading=\"lazy\"></a></p>\n\n<p>これが最低限のコードです。赤い四角がありますが画面のサイズもわかりません。</p>\n\n<p>・<code>&lt;Stage&gt;</code>・・・描画の土台。width、heightは画面のサイズ。可変にするとエラーや予期しない動作をするので固定値にしましょう。<br>\n・<code>&lt;Layer&gt;</code>・・・名前の通り。<br>\n・<code>&lt;Rect&gt;</code>・・・描画用タグ。この部分が描画される。</p>\n\n<p>注意：<code>&lt;Stage&gt;</code>、<code>&lt;Layer&gt;</code>は必須です。どれだけ描画部分を記述しても何も表示されません。ただし、警告は出ますがエラーとしてページが停止することはありません。<br>\n<code>&lt;Stage&gt;</code>、<code>&lt;Layer&gt;</code>が一つでもある場合、その外に<code>&lt;Rect&gt;</code>等を記述するとコマンドプロンプト上は正常に動作している判断し、警告も出ません。気を付けてください。</p>\n\n<h1>\n<span id=\"種類\" class=\"fragment\"></span><a href=\"#%E7%A8%AE%E9%A1%9E\"><i class=\"fa fa-link\"></i></a>種類</h1>\n\n<p>描画用タグは<a href=\"https://konvajs.org/docs/shapes/Rect.html\" rel=\"nofollow noopener\" target=\"_blank\">konva公式サイト</a>には全部で17種あります。<br>\n今回は基本的な四角を描画する<code>&lt;Rect&gt;</code>、真円を描画する<code>&lt;Circle&gt;</code>、文字列を描画する<code>&lt;Text&gt;</code>、画像を描画する<code>&lt;Image&gt;</code>について使用方法を書いていきます。</p>\n\n<h2>\n<span id=\"rect\" class=\"fragment\"></span><a href=\"#rect\"><i class=\"fa fa-link\"></i></a>Rect</h2>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Stage</span><span class=\"p\">,</span> <span class=\"nx\">Layer</span><span class=\"p\">,</span> <span class=\"nx\">Rect</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-konva</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Stage</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Layer</span><span class=\"o\">&gt;</span>\n<span class=\"err\">　　　　</span><span class=\"p\">{</span><span class=\"cm\">/*枠です。見やすくするためにあります。*/</span><span class=\"p\">}</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Rect</span> <span class=\"nx\">stroke</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">black</span><span class=\"dl\">'</span> <span class=\"nx\">strokeWidth</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}</span> <span class=\"nx\">x</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">}</span> <span class=\"nx\">y</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">}</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"nx\">Rect</span> <span class=\"nx\">fill</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">red</span><span class=\"dl\">'</span> <span class=\"nx\">x</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">100</span><span class=\"p\">}</span> <span class=\"nx\">y</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">100</span><span class=\"p\">}</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">300</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">200</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/Layer</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/Stage</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/5bb06ae92533a556fa98ecebf65edabebb9a6ff4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f313839343538362f30666562383562622d363032352d376131622d306130382d6638363662633936323637372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1894586%2F0feb85bb-6025-7a1b-0a08-f866bc962677.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=06ec23b4ce7a22c8d1507367b3b64793\" alt=\"スクリーンショット (65).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1894586/0feb85bb-6025-7a1b-0a08-f866bc962677.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1894586%2F0feb85bb-6025-7a1b-0a08-f866bc962677.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b89b59a0deac17addc10a1a793800242 1x\" loading=\"lazy\"></a></p>\n\n<p>・<code>fill</code>・・・色<br>\n・<code>x</code>、<code>y</code>・・・座標<br>\n・<code>width</code>、<code>height</code>・・・四角のサイズ</p>\n\n<p>すべてのタグに共通しますが<code>x</code>、<code>y</code>の座標は<code>&lt;Stage&gt;</code>のサイズを超える座標に置くと見えなくなったり、途中で途切れたりします。</p>\n\n<h2>\n<span id=\"circle\" class=\"fragment\"></span><a href=\"#circle\"><i class=\"fa fa-link\"></i></a>Circle</h2>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Stage</span><span class=\"p\">,</span> <span class=\"nx\">Layer</span><span class=\"p\">,</span> <span class=\"nx\">Circle</span>  <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-konva</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Stage</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Layer</span><span class=\"o\">&gt;</span>\n<span class=\"err\">　　　　</span><span class=\"p\">{</span><span class=\"cm\">/*枠です。見やすくするためにあります。*/</span><span class=\"p\">}</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Rect</span> <span class=\"nx\">stroke</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">black</span><span class=\"dl\">'</span> <span class=\"nx\">strokeWidth</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}</span> <span class=\"nx\">x</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">}</span> <span class=\"nx\">y</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">}</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"nx\">Circle</span> <span class=\"nx\">fill</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">red</span><span class=\"dl\">'</span> <span class=\"nx\">x</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">200</span><span class=\"p\">}</span> <span class=\"nx\">y</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">200</span><span class=\"p\">}</span> <span class=\"nx\">radius</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">150</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/Layer</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/Stage</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/02840bfea5c607960a724cd68d36cc2832b8b3c9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f313839343538362f32346563663463342d376563372d346264392d613034642d3630623264666534363461622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1894586%2F24ecf4c4-7ec7-4bd9-a04d-60b2dfe464ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e9e04735ca8a5c47c799888873e20e75\" alt=\"スクリーンショット (66).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1894586/24ecf4c4-7ec7-4bd9-a04d-60b2dfe464ab.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1894586%2F24ecf4c4-7ec7-4bd9-a04d-60b2dfe464ab.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f66de595794fcad2e440841beacc82f6 1x\" loading=\"lazy\"></a></p>\n\n<p>・<code>fill</code>・・・色<br>\n・<code>x</code>、<code>y</code>・・・中心座標<br>\n・<code>radius</code>・・・半径</p>\n\n<h2>\n<span id=\"text\" class=\"fragment\"></span><a href=\"#text\"><i class=\"fa fa-link\"></i></a>Text</h2>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Stage</span><span class=\"p\">,</span> <span class=\"nx\">Layer</span><span class=\"p\">,</span> <span class=\"nx\">Text</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-konva</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Stage</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Layer</span><span class=\"o\">&gt;</span>\n<span class=\"err\">　　　　</span><span class=\"p\">{</span><span class=\"cm\">/*枠です。見やすくするためにあります。*/</span><span class=\"p\">}</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Rect</span> <span class=\"nx\">stroke</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">black</span><span class=\"dl\">'</span> <span class=\"nx\">strokeWidth</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}</span> <span class=\"nx\">x</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">}</span> <span class=\"nx\">y</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">}</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>          <span class=\"o\">&lt;</span><span class=\"nx\">Text</span> <span class=\"nx\">text</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">aaaあああ</span><span class=\"dl\">'</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">300</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">200</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/Layer</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/Stage</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/0811763ae6f776e940fa0342d5c99d4018167a0f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f313839343538362f34646634613736612d663265642d316434312d306335652d6432646464373132643563342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1894586%2F4df4a76a-f2ed-1d41-0c5e-d2ddd712d5c4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=62084d94aba3e33533a3255f4fac90dc\" alt=\"スクリーンショット (67).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1894586/4df4a76a-f2ed-1d41-0c5e-d2ddd712d5c4.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1894586%2F4df4a76a-f2ed-1d41-0c5e-d2ddd712d5c4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=00fa8ccd75ecc3887c690000d15e2ef4 1x\" loading=\"lazy\"></a></p>\n\n<p>・<code>text</code>・・・テキスト<br>\n・<code>width</code>、<code>height</code>・・・文字を入れる枠のサイズ。テキストボックスのサイズ。</p>\n\n<h2>\n<span id=\"image\" class=\"fragment\"></span><a href=\"#image\"><i class=\"fa fa-link\"></i></a>Image</h2>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app.tsx</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Stage</span><span class=\"p\">,</span> <span class=\"nx\">Layer</span><span class=\"p\">,</span> <span class=\"nx\">Image</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-konva</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">logo</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./logo.svg</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">img</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">Image</span><span class=\"p\">();</span>\n  <span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">logo</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Stage</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Layer</span><span class=\"o\">&gt;</span>\n<span class=\"err\">　　　　</span><span class=\"p\">{</span><span class=\"cm\">/*枠です。見やすくするためにあります。*/</span><span class=\"p\">}</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Rect</span> <span class=\"nx\">stroke</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">black</span><span class=\"dl\">'</span> <span class=\"nx\">strokeWidth</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}</span> <span class=\"nx\">x</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">}</span> <span class=\"nx\">y</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">}</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">500</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>          <span class=\"o\">&lt;</span><span class=\"nx\">Image</span> <span class=\"nx\">image</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">img</span><span class=\"p\">}</span> <span class=\"nx\">width</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">width</span><span class=\"p\">}</span> <span class=\"nx\">height</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">img</span><span class=\"p\">.</span><span class=\"nx\">height</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"sr\">/Layer</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/Stage</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n\n</code></pre></div>\n</div>\n\n<p><a href=\"https://camo.qiitausercontent.com/ba8e2d4956b578408d3cd78e0d6d5e22c7be33e6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f313839343538362f33633335383639332d343033392d646162382d626534332d6661626231613430613731332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1894586%2F3c358693-4039-dab8-be43-fabb1a40a713.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=aec4accfe1e4986a64b81144acf2e6af\" alt=\"スクリーンショット (68).png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1894586/3c358693-4039-dab8-be43-fabb1a40a713.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1894586%2F3c358693-4039-dab8-be43-fabb1a40a713.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4226653ec822dee0aeb8da0f78080ad1 1x\" loading=\"lazy\"></a></p>\n\n<p>・<code>image</code>・・・画像。型に注意が必要。<br>\n・<code>width</code>、<code>height</code>・・・画像サイズ。基本的には画像のサイズをそのまま使うのがいいが別途に設定すると横に引き延ばした画像になる。</p>\n\n<h1>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h1>\n\n<h1>\n<span id=\"参考サイト\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>参考サイト</h1>\n\n<p><a href=\"https://qiita.com/YSRKEN/items/bb8b34510d70ec90eb50\" id=\"reference-27f1cb3cd0c3d979f12f\">react-konvaライブラリが使って便利だったので使用法などをメモ</a></p>\n\n<p><a href=\"https://konvajs.org/\" rel=\"nofollow noopener\" target=\"_blank\">konva公式サイト</a></p>\n",
    "body": "備忘録。使い方や知ったことについて書きますが詳細説明は省くことがあります。\n***\n#概要\n[konva][konva]という2Dグラフィックを描くことができるライブラリをreactの書き方ができるようしたのがreact-konvaライブラリです。今回は導入と基本的な書き方を書いていきます。\n####環境\n| |version|\n|:-:|:-:|\n|React| 17.0.2  |   \n|Konva|  17.0.2-5 |   \n|react-konva| 8.1.3  | \nreactのtypescriptのテンプレートから作成します。\n\n``` \nnpx create-react-app --template typescript myapp\n```\n\n#導入\n``` \n# npm の場合\nnpm install react-konva konva --save\n# yarnの場合\nyarn add react-konva konva\n```\n\n#概念\nここでは説明しません。\n知りたい場合はほかの記事やkonvaについて調べてください。\n\n#基本的な使い方\n```typescript:app.tsx\nimport { Stage, Layer, Rect } from 'react-konva';\n\nfunction App() {\n  return (\n    <Stage width={500} height={500}>\n      <Layer>\n        <Rect fill='red' width={300} height={200} />\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default App;\n```\n![スクリーンショット (64).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1894586/e786b521-905f-b9f9-2baa-c7c8584feb43.png)\n\nこれが最低限のコードです。赤い四角がありますが画面のサイズもわかりません。\n\n・`<Stage>`・・・描画の土台。width、heightは画面のサイズ。可変にするとエラーや予期しない動作をするので固定値にしましょう。\n・`<Layer>`・・・名前の通り。\n・`<Rect>`・・・描画用タグ。この部分が描画される。\n\n注意：`<Stage>`、`<Layer>`は必須です。どれだけ描画部分を記述しても何も表示されません。ただし、警告は出ますがエラーとしてページが停止することはありません。\n`<Stage>`、`<Layer>`が一つでもある場合、その外に`<Rect>`等を記述するとコマンドプロンプト上は正常に動作している判断し、警告も出ません。気を付けてください。\n\n#種類\n描画用タグは[konva公式サイト][konva_rect]には全部で17種あります。\n今回は基本的な四角を描画する`<Rect>`、真円を描画する`<Circle>`、文字列を描画する`<Text>`、画像を描画する`<Image>`について使用方法を書いていきます。\n\n##Rect\n```typescript:app.tsx\nimport { Stage, Layer, Rect } from 'react-konva';\n\nfunction App() {\n  return (\n    <Stage width={500} height={500}>\n      <Layer>\n　　　　{/*枠です。見やすくするためにあります。*/}\n        <Rect stroke='black' strokeWidth={1} x={0} y={0} width={500} height={500} />\n        <Rect fill='red' x={100} y={100} width={300} height={200} />\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default App;\n\n```\n![スクリーンショット (65).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1894586/0feb85bb-6025-7a1b-0a08-f866bc962677.png)\n\n・`fill`・・・色\n・`x`、`y`・・・座標\n・`width`、`height`・・・四角のサイズ\n\nすべてのタグに共通しますが`x`、`y`の座標は`<Stage>`のサイズを超える座標に置くと見えなくなったり、途中で途切れたりします。\n\n##Circle\n```typescript:app.tsx\nimport { Stage, Layer, Circle  } from 'react-konva';\n\nfunction App() {\n  return (\n    <Stage width={500} height={500}>\n      <Layer>\n　　　　{/*枠です。見やすくするためにあります。*/}\n        <Rect stroke='black' strokeWidth={1} x={0} y={0} width={500} height={500} />\n        <Circle fill='red' x={200} y={200} radius={150} />\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default App;\n\n```\n![スクリーンショット (66).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1894586/24ecf4c4-7ec7-4bd9-a04d-60b2dfe464ab.png)\n\n・`fill`・・・色\n・`x`、`y`・・・中心座標\n・`radius`・・・半径\n\n##Text\n```typescript:app.tsx\nimport { Stage, Layer, Text} from 'react-konva';\n\nfunction App() {\n  return (\n    <Stage width={500} height={500}>\n      <Layer>\n　　　　{/*枠です。見やすくするためにあります。*/}\n        <Rect stroke='black' strokeWidth={1} x={0} y={0} width={500} height={500} />\n          <Text text='aaaあああ' width={300} height={200} />\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default App;\n\n```\n![スクリーンショット (67).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1894586/4df4a76a-f2ed-1d41-0c5e-d2ddd712d5c4.png)\n\n・`text`・・・テキスト\n・`width`、`height`・・・文字を入れる枠のサイズ。テキストボックスのサイズ。\n\n##Image\n```typescript:app.tsx\nimport { Stage, Layer, Image} from 'react-konva';\nimport logo from './logo.svg';\n\nfunction App() {\n  let img = new window.Image();\n  img.src = logo;\n  return (\n    <Stage width={500} height={500}>\n      <Layer>\n　　　　{/*枠です。見やすくするためにあります。*/}\n        <Rect stroke='black' strokeWidth={1} x={0} y={0} width={500} height={500} />\n          <Image image={img} width={img.width} height={img.height} />\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default App;\n\n```\n![スクリーンショット (68).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1894586/3c358693-4039-dab8-be43-fabb1a40a713.png)\n\n・`image`・・・画像。型に注意が必要。\n・`width`、`height`・・・画像サイズ。基本的には画像のサイズをそのまま使うのがいいが別途に設定すると横に引き延ばした画像になる。\n\n#終わりに\n\n#参考サイト\n[react-konvaライブラリが使って便利だったので使用法などをメモ][link1]\n[link1]:https://qiita.com/YSRKEN/items/bb8b34510d70ec90eb50\n[konva公式サイト][konva]\n[konva]:https://konvajs.org/\n[konva_rect]:https://konvajs.org/docs/shapes/Rect.html\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:26:53+09:00",
    "group": null,
    "id": "394ed8d32a0b9b61a7d0",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "TypeScript",
        "versions": []
      },
      {
        "name": "React",
        "versions": []
      },
      {
        "name": "konva",
        "versions": []
      },
      {
        "name": "react-konva",
        "versions": []
      }
    ],
    "title": "react-konvaを使ってみる（基本編）",
    "updated_at": "2021-08-25T13:26:53+09:00",
    "url": "https://qiita.com/ykawaguchi_1998/items/394ed8d32a0b9b61a7d0",
    "user": {
      "description": "勉強中のプログラマーです。\r\nweb系とlinux系を主に勉強中です。",
      "facebook_id": ",",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": null,
      "id": "ykawaguchi_1998",
      "items_count": 1,
      "linkedin_id": "",
      "location": "",
      "name": "yudai kawaguchi",
      "organization": "株式会社ピコグラムネットワークス",
      "permanent_id": 1894586,
      "profile_image_url": "https://lh3.googleusercontent.com/a/AATXAJzoA3JlCisG3zx465Rr8vQzTMzmUkCPOY2ZDd9V=s50-mo",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p>ラズパイは初期設定の状態では<br>\nユーザーIDがPi<br>\nパスワードがraspberry<br>\nとなっており，セキュリティ的によろしくない状態です．なので最初にこれを変更した方が良さそうです．<br>\nなおSSHでもGUIでもどちらでもできます．</p>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<ol>\n<li>仮のtmpユーザーを作成</li>\n<li>自動ログインを無効にする</li>\n<li>再起動しtmpユーザーでログインする</li>\n<li>piユーザーIDの変更，ホームディレクトリの変更</li>\n<li>再起動し新しいユーザーIDでログイン後，tmpを削除する</li>\n<li>パスワードを変更する</li>\n</ol>\n\n<h2>\n<span id=\"仮のtmpユーザーを作成\" class=\"fragment\"></span><a href=\"#%E4%BB%AE%E3%81%AEtmp%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>仮のtmpユーザーを作成</h2>\n\n<p>まずpiのユーザーIDを変更するためだけの目的で仮のtmpという名前のユーザーを作成します．<br>\nこのtmpは後で削除します．</p>\n\n<p>下記コマンドでtmpユーザーを作成し，sudo権限を追加します．<br>\nユーザー作成時にパスワードを要求されます．tmpユーザーは一時的なものなのでなんでも良いですが後でパスワードが必要なので忘れないようにしてください．</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">terminal</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nb\">sudo </span>adduser tmp\n<span class=\"nb\">sudo </span>gpasswd <span class=\"nt\">-a</span> tmp <span class=\"nb\">sudo</span>\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"自動ログインを無効にする\" class=\"fragment\"></span><a href=\"#%E8%87%AA%E5%8B%95%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%92%E7%84%A1%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>自動ログインを無効にする</h2>\n\n<h4>\n<span id=\"sshの場合\" class=\"fragment\"></span><a href=\"#ssh%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>SSHの場合</h4>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nb\">sudo </span>raspi-config\n</code></pre></div></div>\n\n<p>コマンドを実行します．<br>\n「1 System Options」「S5 Boot / Auto Login」「B1 Console」を選択します．<br>\n<a href=\"https://camo.qiitausercontent.com/59ddc646bc41e368afac4d7cb318b35eb89b877e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3537303238302f35316639333139302d313163632d323132302d396136612d3630373932333464333936662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2F51f93190-11cc-2120-9a6a-6079234d396f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=56ee0cf59c0f4e09f731e909ca75e282\" width=\"70%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/51f93190-11cc-2120-9a6a-6079234d396f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2F51f93190-11cc-2120-9a6a-6079234d396f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e4145062490713c0975913d4e761033f 1x\" loading=\"lazy\"></a><br>\n<a href=\"https://camo.qiitausercontent.com/573b1b547c27b4e997ebe6a35165d7ef460cf13b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3537303238302f63346562383033392d626664612d663134372d316661312d3862353262386632656634622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2Fc4eb8039-bfda-f147-1fa1-8b52b8f2ef4b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=c322cefa6f76099975adea53274d3dfa\" width=\"70%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/c4eb8039-bfda-f147-1fa1-8b52b8f2ef4b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2Fc4eb8039-bfda-f147-1fa1-8b52b8f2ef4b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b4ccc3df8e46200e0d83fa2a47d0cbd8 1x\" loading=\"lazy\"></a><br>\n<a href=\"https://camo.qiitausercontent.com/dd65c80d592580ef3f0258f279a415d38ce421d1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3537303238302f34393263396630332d653565632d613839642d373761642d3364393061356666303134632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2F492c9f03-e5ec-a89d-77ad-3d90a5ff014c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d70ccfd0a2921174f78433ccdf44591e\" width=\"70%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/492c9f03-e5ec-a89d-77ad-3d90a5ff014c.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2F492c9f03-e5ec-a89d-77ad-3d90a5ff014c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=54a50af4f6023fc16e342784dc5520f1 1x\" loading=\"lazy\"></a></p>\n\n<p>最初の画面に戻るので右下の「Finish」を選択します．<br>\n<a href=\"https://camo.qiitausercontent.com/da3868418e02097cb623fc527c6445d8a70d1860/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3537303238302f34393034333063662d623865372d636131662d383738302d3930653839383438366538362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2F490430cf-b8e7-ca1f-8780-90e898486e86.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=971943933ef7641bd4a5c8e08a01fff6\" width=\"70%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/490430cf-b8e7-ca1f-8780-90e898486e86.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2F490430cf-b8e7-ca1f-8780-90e898486e86.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e2a8712783e9b63efdfc3ad6ea78a40a 1x\" loading=\"lazy\"></a></p>\n\n<p>Would you like to reboot now?と聞かれるので「はい」で再起動します．<br>\n<a href=\"https://camo.qiitausercontent.com/b113e78403c3808d5814fc1f2200d58442a8de3d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3537303238302f30626332373031372d356230312d626533652d666333312d3336346161663366653439622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2F0bc27017-5b01-be3e-fc31-364aaf3fe49b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=218758e6f16168f81fba3bc37650d691\" width=\"50%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/0bc27017-5b01-be3e-fc31-364aaf3fe49b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2F0bc27017-5b01-be3e-fc31-364aaf3fe49b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=946a1e16be0c91e475241072c19073c6 1x\" loading=\"lazy\"></a></p>\n\n<h4>\n<span id=\"guiの場合\" class=\"fragment\"></span><a href=\"#gui%E3%81%AE%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>GUIの場合</h4>\n\n<p>「設定」から「Raspberry Piの設定」を開きます．<br>\n<a href=\"https://camo.qiitausercontent.com/160bbc100d33a9f710138df84bf51a83cfe40553/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3537303238302f66386639313133332d633761392d636562622d653664302d3434323665326230343431392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2Ff8f91133-c7a9-cebb-e6d0-4426e2b04419.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=38992cd928fcd517c43b40a308ee21f7\" width=\"60%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/f8f91133-c7a9-cebb-e6d0-4426e2b04419.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2Ff8f91133-c7a9-cebb-e6d0-4426e2b04419.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=cfee922d5ea4c07cc916ffa6d248ff50 1x\" loading=\"lazy\"></a></p>\n\n<p>「システム」内の「自動ログイン」を無効にし「OK」.<br>\n<a href=\"https://camo.qiitausercontent.com/eed415e535242058e67239a7800c298b24f78b6a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3537303238302f61323134303238322d333437332d666566322d356631612d3665376662333866343862622e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2Fa2140282-3473-fef2-5f1a-6e7fb38f48bb.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9ce8593da05a51b3645368e6854e44c1\" width=\"70%\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/a2140282-3473-fef2-5f1a-6e7fb38f48bb.jpeg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F570280%2Fa2140282-3473-fef2-5f1a-6e7fb38f48bb.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6e961092f46d4e540551f6f8df9b6f9f 1x\" loading=\"lazy\"></a><br>\n再起動します．</p>\n\n<h2>\n<span id=\"再起動しtmpユーザーでログインする\" class=\"fragment\"></span><a href=\"#%E5%86%8D%E8%B5%B7%E5%8B%95%E3%81%97tmp%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%A7%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>再起動しtmpユーザーでログインする</h2>\n\n<p>自動ログインを無効にしたので再起動時にログインを要求されます．<br>\nこの時にpiではなくtmpユーザーでログインします．</p>\n\n<h2>\n<span id=\"piユーザーidの変更ホームディレクトリの変更\" class=\"fragment\"></span><a href=\"#pi%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BCid%E3%81%AE%E5%A4%89%E6%9B%B4%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E5%A4%89%E6%9B%B4\"><i class=\"fa fa-link\"></i></a>piユーザーIDの変更，ホームディレクトリの変更</h2>\n\n<p>piユーザーを変更し，現在piと名前がついているホームディレクトリ名も新しいユーザーIDに変更します．<br>\nここでは新しいユーザーIDをnew_userとします．</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">terminal</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nb\">sudo </span>usermod <span class=\"nt\">-l</span> new_user pi\n<span class=\"nb\">sudo </span>usermod <span class=\"nt\">-d</span> /home/new_user <span class=\"nt\">-m</span> new_user\n<span class=\"nb\">sudo </span>groupmod <span class=\"nt\">-n</span> new_user pi\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"再起動し新しいユーザーidでログイン後tmpを削除する\" class=\"fragment\"></span><a href=\"#%E5%86%8D%E8%B5%B7%E5%8B%95%E3%81%97%E6%96%B0%E3%81%97%E3%81%84%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BCid%E3%81%A7%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E5%BE%8Ctmp%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>再起動し新しいユーザーIDでログイン後，tmpを削除する</h2>\n\n<p>tmpユーザーを削除します．<br>\n-rオプションをつけることでホームディレクトリごと削除することができます．</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">terminal</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nb\">sudo </span>userdel <span class=\"nt\">-r</span> tmp\n</code></pre></div>\n</div>\n\n<h2>\n<span id=\"パスワードを変更する\" class=\"fragment\"></span><a href=\"#%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>パスワードを変更する</h2>\n\n<p>ここまででユーザーIDは変更できましたが，パスワードがまだ初期値の「raspberry」のままです．<br>\n以下コマンドでパスワードを変更しておきましょう．</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">terminal</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nb\">sudo </span>passwd new_user\n</code></pre></div>\n</div>\n\n<h5>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h5>\n\n<p><a href=\"https://www.souichi.club/raspberrypi/default-user-pi/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.souichi.club/raspberrypi/default-user-pi/</a><br>\n<a href=\"https://rs-techdev.com/archives/32\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://rs-techdev.com/archives/32</a><br>\n<a href=\"https://qiita.com/NakamoriSuganuma/items/e1bfeb6e46cf09ab1e89\" class=\"autolink\" id=\"reference-7e3e386bb245267bfbf7\">https://qiita.com/NakamoriSuganuma/items/e1bfeb6e46cf09ab1e89</a></p>\n",
    "body": "# 概要\nラズパイは初期設定の状態では\nユーザーIDがPi\nパスワードがraspberry\nとなっており，セキュリティ的によろしくない状態です．なので最初にこれを変更した方が良さそうです．\nなおSSHでもGUIでもどちらでもできます．\n\n# 手順\n1. 仮のtmpユーザーを作成\n2. 自動ログインを無効にする\n3. 再起動しtmpユーザーでログインする\n4. piユーザーIDの変更，ホームディレクトリの変更\n5. 再起動し新しいユーザーIDでログイン後，tmpを削除する\n6. パスワードを変更する\n\n## 仮のtmpユーザーを作成\nまずpiのユーザーIDを変更するためだけの目的で仮のtmpという名前のユーザーを作成します．\nこのtmpは後で削除します．\n\n下記コマンドでtmpユーザーを作成し，sudo権限を追加します．\nユーザー作成時にパスワードを要求されます．tmpユーザーは一時的なものなのでなんでも良いですが後でパスワードが必要なので忘れないようにしてください．\n\n```bash:terminal\nsudo adduser tmp\nsudo gpasswd -a tmp sudo\n```\n\n## 自動ログインを無効にする\n#### SSHの場合\n\n```bash\nsudo raspi-config\n```\n\nコマンドを実行します．\n「1 System Options」「S5 Boot / Auto Login」「B1 Console」を選択します．\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/51f93190-11cc-2120-9a6a-6079234d396f.png\" width=70%>\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/c4eb8039-bfda-f147-1fa1-8b52b8f2ef4b.png\" width=70%>\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/492c9f03-e5ec-a89d-77ad-3d90a5ff014c.png\" width=70%>\n\n最初の画面に戻るので右下の「Finish」を選択します．\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/490430cf-b8e7-ca1f-8780-90e898486e86.png\" width=70%>\n\nWould you like to reboot now?と聞かれるので「はい」で再起動します．\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/0bc27017-5b01-be3e-fc31-364aaf3fe49b.png\" width=50%>\n\n#### GUIの場合\n「設定」から「Raspberry Piの設定」を開きます．\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/f8f91133-c7a9-cebb-e6d0-4426e2b04419.png\" width=60%>\n\n「システム」内の「自動ログイン」を無効にし「OK」.\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/a2140282-3473-fef2-5f1a-6e7fb38f48bb.jpeg\" width=70%>\n再起動します．\n\n\n## 再起動しtmpユーザーでログインする\n自動ログインを無効にしたので再起動時にログインを要求されます．\nこの時にpiではなくtmpユーザーでログインします．\n\n## piユーザーIDの変更，ホームディレクトリの変更\npiユーザーを変更し，現在piと名前がついているホームディレクトリ名も新しいユーザーIDに変更します．\nここでは新しいユーザーIDをnew_userとします．\n\n\n```bash:terminal\nsudo usermod -l new_user pi\nsudo usermod -d /home/new_user -m new_user\nsudo groupmod -n new_user pi\n```\n\n## 再起動し新しいユーザーIDでログイン後，tmpを削除する\ntmpユーザーを削除します．\n-rオプションをつけることでホームディレクトリごと削除することができます．\n\n```bash:terminal\nsudo userdel -r tmp\n```\n\n## パスワードを変更する\nここまででユーザーIDは変更できましたが，パスワードがまだ初期値の「raspberry」のままです．\n以下コマンドでパスワードを変更しておきましょう．\n\n```bash:terminal\nsudo passwd new_user\n```\n\n##### 参考\nhttps://www.souichi.club/raspberrypi/default-user-pi/\nhttps://rs-techdev.com/archives/32\nhttps://qiita.com/NakamoriSuganuma/items/e1bfeb6e46cf09ab1e89\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:21:42+09:00",
    "group": null,
    "id": "5c40a5bf5c0efaecf9b5",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "RaspberryPi",
        "versions": []
      }
    ],
    "title": "Raspberry Pi 4 (ラズパイ4) でユーザーIDとパスワードを変更する",
    "updated_at": "2021-08-25T13:21:42+09:00",
    "url": "https://qiita.com/tonegawa07/items/5c40a5bf5c0efaecf9b5",
    "user": {
      "description": "地方大学院生。がんばります。",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": null,
      "id": "tonegawa07",
      "items_count": 6,
      "linkedin_id": "",
      "location": "",
      "name": "Fuk",
      "organization": "",
      "permanent_id": 570280,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/570280/profile-images/1614527020",
      "team_only": false,
      "twitter_screen_name": "tonegawa07",
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p>osを作る。<br>\nsetjmpを使わない、ライブラリー使ってみた。</p>\n\n<h1>\n<span id=\"参考にしたページ\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E3%81%AB%E3%81%97%E3%81%9F%E3%83%9A%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>参考にしたページ</h1>\n\n<p><qiita-embed-ogp src=\"http://okanoue50.my.coocan.jp/2_RTOS/10_RtosForArduiino.htm\"></qiita-embed-ogp></p>\n\n<h1>\n<span id=\"サンプルコード\" class=\"fragment\"></span><a href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>サンプルコード</h1>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>#include \"RTOS.h\"\n\nvolatile uint8_t HandleOfTask1,\n    HandleOfTask2,\n    HandleOfTask3;\n\nvoid task1(void) {\n    Serial.print(\"task-1  \");\n    Serial.println(millis());\n}\nvoid task2(void) {\n    Serial.print(\"task-2  \");\n    Serial.println(millis());\n}\nvoid task3(void) {\n    Serial.print(\"task-3  \");\n    Serial.println(millis());\n}\n\nvoid setup() {\n    Serial.begin(9600);\n    Serial.println(\"ok\");\n    HandleOfTask1 = Rtos.Loading(0, 500000L, task1);\n    HandleOfTask2 = Rtos.Loading(0, 750000L, task2);\n    HandleOfTask3 = Rtos.Loading(0, 1000000L, task3);\n}\n\nvoid loop() {\n    Rtos.Control();\n}\n\n\n\n</code></pre></div></div>\n\n<h1>\n<span id=\"結果\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>結果</h1>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>task-1  499\ntask-2  749\ntask-1  999\ntask-3  999\ntask-1  1499\ntask-2  1500\ntask-1  1999\ntask-3  1999\ntask-2  2249\ntask-1  2499\ntask-1  2999\ntask-2  2999\ntask-3  3000\ntask-1  3499\ntask-2  3749\ntask-1  3999\ntask-3  3999\ntask-1  4499\ntask-2  4499\ntask-1  4999\ntask-3  5000\ntask-2  5249\ntask-1  5499\ntask-1  5999\ntask-2  5999\ntask-3  5999\ntask-1  6499\ntask-2  6749\n\n</code></pre></div></div>\n\n<p>以上。</p>\n",
    "body": "#概要\n\nosを作る。\nsetjmpを使わない、ライブラリー使ってみた。\n\n#参考にしたページ\n\nhttp://okanoue50.my.coocan.jp/2_RTOS/10_RtosForArduiino.htm\n\n#サンプルコード\n\n```\n#include \"RTOS.h\"\n\nvolatile uint8_t HandleOfTask1,\n\tHandleOfTask2,\n\tHandleOfTask3;\n\nvoid task1(void) {\n\tSerial.print(\"task-1  \");\n\tSerial.println(millis());\n}\nvoid task2(void) {\n\tSerial.print(\"task-2  \");\n\tSerial.println(millis());\n}\nvoid task3(void) {\n\tSerial.print(\"task-3  \");\n\tSerial.println(millis());\n}\n\nvoid setup() {\n\tSerial.begin(9600);\n\tSerial.println(\"ok\");\n\tHandleOfTask1 = Rtos.Loading(0, 500000L, task1);\n\tHandleOfTask2 = Rtos.Loading(0, 750000L, task2);\n\tHandleOfTask3 = Rtos.Loading(0, 1000000L, task3);\n}\n\nvoid loop() {\n\tRtos.Control();\n}\n\n\n\n```\n\n\n#結果\n\n```\ntask-1  499\ntask-2  749\ntask-1  999\ntask-3  999\ntask-1  1499\ntask-2  1500\ntask-1  1999\ntask-3  1999\ntask-2  2249\ntask-1  2499\ntask-1  2999\ntask-2  2999\ntask-3  3000\ntask-1  3499\ntask-2  3749\ntask-1  3999\ntask-3  3999\ntask-1  4499\ntask-2  4499\ntask-1  4999\ntask-3  5000\ntask-2  5249\ntask-1  5499\ntask-1  5999\ntask-2  5999\ntask-3  5999\ntask-1  6499\ntask-2  6749\n\n```\n\n\n以上。\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:07:08+09:00",
    "group": null,
    "id": "24423dde227c9686e21b",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Arduino",
        "versions": []
      },
      {
        "name": "自作OS",
        "versions": []
      }
    ],
    "title": "osを作る その6",
    "updated_at": "2021-08-25T13:07:08+09:00",
    "url": "https://qiita.com/ohisama@github/items/24423dde227c9686e21b",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 47,
      "github_login_name": "ohisama",
      "id": "ohisama@github",
      "items_count": 2302,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 18104,
      "profile_image_url": "https://secure.gravatar.com/avatar/2e0bb506fbe90e6572bf92fa05db88d3?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": null
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p>こちらの記事を参考にしました。<br>\n<a href=\"http://www.ams.eng.osaka-u.ac.jp/user/ishihara/?p=1942\" rel=\"nofollow noopener\" target=\"_blank\">UDPでデータを受信する最も単純なPythonコード（Jupyter notebook版）</a></p>\n\n<p>次のバージョンで確認しました。</p>\n\n<blockquote>\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ python3 --version\nPython 3.7.3\n</code></pre></div></div>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"py\">\n<div class=\"code-lang\"><span class=\"bold\">receive.py</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">#! /usr/bin/python3\n#\n#   receive.py\n#\n#                           Aug/25/2021\n#\n</span><span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s\">'localhost'</span>\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">1308</span>\n\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span> \n\n<span class=\"n\">udp</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">.</span><span class=\"n\">SOCK_DGRAM</span><span class=\"p\">)</span>\n<span class=\"n\">udp</span><span class=\"p\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">rcv_byte</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">()</span> <span class=\"c1\">#バイトデータ受信用変数\n</span>        <span class=\"n\">rcv_byte</span><span class=\"p\">,</span> <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">udp</span><span class=\"p\">.</span><span class=\"n\">recvfrom</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span> <span class=\"c1\">#括弧内は最大バイト数設定\n</span>        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">rcv_byte</span><span class=\"p\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span> <span class=\"c1\">#バイトデータを文字列に変換\n</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">))</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s\">'close'</span><span class=\"p\">:</span>\n            <span class=\"n\">udp</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n            <span class=\"k\">break</span>\n    <span class=\"k\">except</span> <span class=\"nb\">KeyboardInterrupt</span><span class=\"p\">:</span>\n        <span class=\"n\">udp</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre></div>\n</div>\n\n<p>ポート 1308 に udp で送信するスクリプト</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nb\">echo</span> <span class=\"s1\">'Good Morning'</span> | ncat <span class=\"nt\">-4</span> <span class=\"nt\">-u</span> <span class=\"nt\">-w</span> 1 localhost 1308\n</code></pre></div></div>\n\n<p>終了させるスクリプト</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nb\">echo</span> <span class=\"s1\">'close'</span> | ncat <span class=\"nt\">-4</span> <span class=\"nt\">-u</span> <span class=\"nt\">-w</span> 1 localhost 1308\n</code></pre></div></div>\n",
    "body": "こちらの記事を参考にしました。\n[UDPでデータを受信する最も単純なPythonコード（Jupyter notebook版）](http://www.ams.eng.osaka-u.ac.jp/user/ishihara/?p=1942)\n\n次のバージョンで確認しました。\n\n>```text\n$ python3 --version\nPython 3.7.3\n```\n\n```py:receive.py\n#! /usr/bin/python3\n#\n#   receive.py\n#\n#                           Aug/25/2021\n#\nimport socket\n\nhost = 'localhost'\nport = 1308\n\naddress = (host, port) \n\nudp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp.bind(address)\n\nwhile True:\n    try:\n        rcv_byte = bytes() #バイトデータ受信用変数\n        rcv_byte, addr = udp.recvfrom(1024) #括弧内は最大バイト数設定\n        msg = rcv_byte.decode() #バイトデータを文字列に変換\n        print(len(msg))\n        print(msg)\n        if msg.strip() == 'close':\n            udp.close()\n            break\n    except KeyboardInterrupt:\n        udp.close()\n```\n\nポート 1308 に udp で送信するスクリプト\n\n```bash\necho 'Good Morning' | ncat -4 -u -w 1 localhost 1308\n```\n\n終了させるスクリプト\n\n```bash\necho 'close' | ncat -4 -u -w 1 localhost 1308\n```\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:05:34+09:00",
    "group": null,
    "id": "4d65001547ec8825479e",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Python3",
        "versions": []
      },
      {
        "name": "udp",
        "versions": []
      }
    ],
    "title": "Python3: UDP を受信",
    "updated_at": "2021-08-25T13:07:22+09:00",
    "url": "https://qiita.com/ekzemplaro/items/4d65001547ec8825479e",
    "user": {
      "description": "Python3,Node.js,Go,PHP,Nginx,RaspberryPi,Arduino あたりがカバー範囲です。",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 68,
      "github_login_name": null,
      "id": "ekzemplaro",
      "items_count": 1243,
      "linkedin_id": "",
      "location": "栃木県",
      "name": "内田 雅智",
      "organization": "個人事業主",
      "permanent_id": 179446,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/179446/profile-images/1497925724",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": "https://ekzemplaro.org"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h2>\n<span id=\"レンダリング\" class=\"fragment\"></span><a href=\"#%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>レンダリング</h2>\n\n<p>通常はプリレンダリング方式で、静的生成(ビルド時にHTMLが生成される)とSSR(リクエストの度にHTMLが生成される)をそれぞれのページで選択できる</p>\n\n<h3>\n<span id=\"参考url\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83url\"><i class=\"fa fa-link\"></i></a>参考URL</h3>\n\n<p><qiita-embed-ogp src=\"https://nextjs-ja-translation-docs.vercel.app/docs/tag/v9.2.2/getting-started\"></qiita-embed-ogp></p>\n",
    "body": "## レンダリング\n通常はプリレンダリング方式で、静的生成(ビルド時にHTMLが生成される)とSSR(リクエストの度にHTMLが生成される)をそれぞれのページで選択できる\n\n\n### 参考URL\nhttps://nextjs-ja-translation-docs.vercel.app/docs/tag/v9.2.2/getting-started\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T13:00:30+09:00",
    "group": null,
    "id": "8c23dd89d469dfc1eefb",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "next.js",
        "versions": []
      }
    ],
    "title": "【キャッチアップ】nextjs",
    "updated_at": "2021-08-25T13:00:30+09:00",
    "url": "https://qiita.com/shujishujishuji/items/8c23dd89d469dfc1eefb",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 1,
      "followers_count": 0,
      "github_login_name": "shujishujishuji",
      "id": "shujishujishuji",
      "items_count": 29,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 504726,
      "profile_image_url": "https://avatars3.githubusercontent.com/u/53798749?v=4",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": null
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"この記事は\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%AF\"><i class=\"fa fa-link\"></i></a>この記事は</h1>\n\n<p>私は主にAndroid StudioやIDEAなどを好んで使用していますが、久々にアプリを開くと何故かエラーまみれな時が多いですのでその時の対処法をここに備忘録として書き記します。このエラーまみれというのは、以前に放置していたエラーなどではなく、むしろ前は何のエラーも出ていなかったのに！というシチェーションを想定しています。</p>\n\n<h1>\n<span id=\"とりま再起動\" class=\"fragment\"></span><a href=\"#%E3%81%A8%E3%82%8A%E3%81%BE%E5%86%8D%E8%B5%B7%E5%8B%95\"><i class=\"fa fa-link\"></i></a>とりま再起動</h1>\n\n<p>「「 再起動は無敵 」」<br>\n一回<code>Cmd + Q</code>でIDEを閉じます。そしてもう一度プロジェクトを開きます。<br>\nこれで上手くいくことが大体だと思っています。</p>\n\n<h1>\n<span id=\"キャッシュをクリア\" class=\"fragment\"></span><a href=\"#%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%82%92%E3%82%AF%E3%83%AA%E3%82%A2\"><i class=\"fa fa-link\"></i></a>キャッシュをクリア</h1>\n\n<p>キャッシュをクリアにします。それぞれのエディタもしくはIDEによってキャッシュをクリアにする方法は違うと思いますので調べてください。</p>\n\n<p>ちなみにAndroid Studioの場合は<code>Build-&gt;Clean project</code><br>\nIDEAの場合は<code>File-&gt;Invalidate Caches</code></p>\n\n<h1>\n<span id=\"信じてビルド\" class=\"fragment\"></span><a href=\"#%E4%BF%A1%E3%81%98%E3%81%A6%E3%83%93%E3%83%AB%E3%83%89\"><i class=\"fa fa-link\"></i></a>信じてビルド</h1>\n\n<p>明らかに赤まみれのコードやけど信じて<code>Build -&gt; Build Project</code>を実行してみましょう。何故か機嫌を取り戻すことができたりします。</p>\n\n<p>他にも何か解決方法を発見した場合は随時解決方法を追加していきます。</p>\n",
    "body": "#この記事は\n私は主にAndroid StudioやIDEAなどを好んで使用していますが、久々にアプリを開くと何故かエラーまみれな時が多いですのでその時の対処法をここに備忘録として書き記します。このエラーまみれというのは、以前に放置していたエラーなどではなく、むしろ前は何のエラーも出ていなかったのに！というシチェーションを想定しています。\n\n# とりま再起動\n「「 再起動は無敵 」」\n一回`Cmd + Q`でIDEを閉じます。そしてもう一度プロジェクトを開きます。\nこれで上手くいくことが大体だと思っています。\n\n# キャッシュをクリア\nキャッシュをクリアにします。それぞれのエディタもしくはIDEによってキャッシュをクリアにする方法は違うと思いますので調べてください。\n\nちなみにAndroid Studioの場合は`Build->Clean project`\nIDEAの場合は`File->Invalidate Caches`\n\n# 信じてビルド\n明らかに赤まみれのコードやけど信じて`Build -> Build Project`を実行してみましょう。何故か機嫌を取り戻すことができたりします。\n\n他にも何か解決方法を発見した場合は随時解決方法を追加していきます。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T12:51:19+09:00",
    "group": null,
    "id": "1845c07191d66f556d1c",
    "likes_count": 1,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "idea",
        "versions": []
      },
      {
        "name": "AndroidStudio",
        "versions": []
      }
    ],
    "title": "久々にAndroidStudio/ IDEAを開いたら何故かエラーまみれな時の対処法",
    "updated_at": "2021-08-25T12:51:19+09:00",
    "url": "https://qiita.com/mi_iroha/items/1845c07191d66f556d1c",
    "user": {
      "description": "同志社大学生命医科学部4回生。大学での専攻は生命科学ですが、将来はweb系の自社開発企業にエンジニアとして就職します！それにむけて現在はweb系の企業でエンジニアとしてアルバイトさせてもらいながらスキルアップ中…！モバイルとwebの両刀使いを目指します！🦪🌟",
      "facebook_id": "",
      "followees_count": 28,
      "followers_count": 37,
      "github_login_name": null,
      "id": "mi_iroha",
      "items_count": 21,
      "linkedin_id": "",
      "location": "大阪",
      "name": "みっちゃん",
      "organization": "同志社大学",
      "permanent_id": 906559,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/906559/d9094756c67e6bd1fe8ee251a8a41cd8b2b6ef39/large.png?1606225732",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": "https://github.com/iroha-168"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p>まず初めに、下記サイトの方に心より感謝を。<br>\n普段投稿とかしないけど、劇的に変わりすぎて滅茶苦茶感動しております。</p>\n\n<p><qiita-embed-ogp src=\"https://blog.h-wd.info/2015/09/01/safari%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E4%BD%BF%E7%94%A8%E9%87%8F%E3%82%92%E5%8A%87%E7%9A%84%E3%81%AB%E6%B8%9B%E3%82%89%E3%81%99%E6%96%B9%E6%B3%95/\"></qiita-embed-ogp></p>\n\n<p>普段、M1のMacBookメモリ８GBを使っているのですが、Safariのメモリ使用量が重すぎて常にグラフの色が黄色になっている状態でした。<br>\n↓こんな感じ<br>\n<a href=\"https://camo.qiitausercontent.com/438344face4a118dbd1dfd4dfe572570cae44f32/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f313639333637362f36363666326135322d666539382d313738362d363636612d3737653465666630633331622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1693676%2F666f2a52-fe98-1786-666a-77e4eff0c31b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1b92441dd24d42d84b4675254a537211\" alt=\"スクリーンショット 2021-08-25 12.39.13.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1693676/666f2a52-fe98-1786-666a-77e4eff0c31b.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1693676%2F666f2a52-fe98-1786-666a-77e4eff0c31b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=588f43fcf30959fed1df6e6a56396574 1x\" loading=\"lazy\"></a></p>\n\n<p>それが、冒頭に感謝したブログの通り、Safariのデバッグメニューをオンにして「Disable Per-tab Web Processes」をオンにするだけで劇的に減りました！<br>\n↓こんな感じ<br>\n<a href=\"https://camo.qiitausercontent.com/616de4255a43f8b5febe578ef47a5c59103c318b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f313639333637362f34353733613562372d383965352d393932392d393238382d3863353633396432313638662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1693676%2F4573a5b7-89e5-9929-9288-8c5639d2168f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0048a49c2f839c22dade91f11d229d7f\" alt=\"スクリーンショット 2021-08-25 12.42.27.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1693676/4573a5b7-89e5-9929-9288-8c5639d2168f.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F1693676%2F4573a5b7-89e5-9929-9288-8c5639d2168f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c156a0968e54816b35f194060b6d5300 1x\" loading=\"lazy\"></a></p>\n\n<p>これで何とかMacBookの買い替えをせずに戦えそう。</p>\n",
    "body": "まず初めに、下記サイトの方に心より感謝を。\n普段投稿とかしないけど、劇的に変わりすぎて滅茶苦茶感動しております。\n\n\nhttps://blog.h-wd.info/2015/09/01/safariのメモリ使用量を劇的に減らす方法/\n\n普段、M1のMacBookメモリ８GBを使っているのですが、Safariのメモリ使用量が重すぎて常にグラフの色が黄色になっている状態でした。\n↓こんな感じ\n![スクリーンショット 2021-08-25 12.39.13.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1693676/666f2a52-fe98-1786-666a-77e4eff0c31b.png)\n\nそれが、冒頭に感謝したブログの通り、Safariのデバッグメニューをオンにして「Disable Per-tab Web Processes」をオンにするだけで劇的に減りました！\n↓こんな感じ\n![スクリーンショット 2021-08-25 12.42.27.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1693676/4573a5b7-89e5-9929-9288-8c5639d2168f.png)\n\nこれで何とかMacBookの買い替えをせずに戦えそう。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T12:49:15+09:00",
    "group": null,
    "id": "61c7a70b3fcfa9e7a025",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Mac",
        "versions": []
      }
    ],
    "title": "M1 MacBookのメモリ使用量が劇的に改善した件について",
    "updated_at": "2021-08-25T12:49:15+09:00",
    "url": "https://qiita.com/ohtaryou1006/items/61c7a70b3fcfa9e7a025",
    "user": {
      "description": null,
      "facebook_id": null,
      "followees_count": 0,
      "followers_count": 0,
      "github_login_name": null,
      "id": "ohtaryou1006",
      "items_count": 2,
      "linkedin_id": null,
      "location": null,
      "name": "",
      "organization": null,
      "permanent_id": 1693676,
      "profile_image_url": "https://lh3.googleusercontent.com/a/AATXAJyWF6Rx-QbvMl6C66am1sz6GcWnMfzrF3YOh0To=s50-mo",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": null
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h2>\n<span id=\"comprehendとは\" class=\"fragment\"></span><a href=\"#comprehend%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Comprehendとは</h2>\n\n<blockquote>\n<p>自然言語処理を行うAIサービスです。主に①言語検出、②感情分析、③キーフレーズ抽出、④エンティティ認識、⑤構文解析の処理を行い情報を取得することができます。</p>\n</blockquote>\n\n<p>今回は①の言語検出と②の感情分析を紹介させていただきます。</p>\n\n<h2>\n<span id=\"言語の検出\" class=\"fragment\"></span><a href=\"#%E8%A8%80%E8%AA%9E%E3%81%AE%E6%A4%9C%E5%87%BA\"><i class=\"fa fa-link\"></i></a>言語の検出</h2>\n\n<p>初めに言語の検出を実行して行きます。</p>\n\n<p>以下の文章の言語を検出します。</p>\n\n<blockquote>\n<p>私はこれから起こる出来事を楽しみにしています。</p>\n</blockquote>\n\n<p>この文章の言語を検出して行きましょう。</p>\n\n<p>検出するpythonファイルの概要<br>\n①ライブラリのインポート<br>\n②comprehend作成<br>\n③言語検出と表示</p>\n\n<div class=\"code-frame\" data-lang=\"python\">\n<div class=\"code-lang\"><span class=\"bold\">comp_japanese.py</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">comprehend</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"p\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s\">'comprehend'</span><span class=\"p\">,</span> <span class=\"s\">'ap-northeast-1'</span><span class=\"p\">)</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"私はこれから起こる出来事を楽しみにしています。\"</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">comprehend</span><span class=\"p\">.</span><span class=\"n\">detect_dominant_language</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"o\">=</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n\n</code></pre></div>\n</div>\n\n<p>comp_japanese.pyを実行します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>python comp_japanese.py\n</code></pre></div></div>\n\n<h3>\n<span id=\"実行結果\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>実行結果</h3>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"Languages\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"LanguageCode\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ja\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nl\">\"Score\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">1.0</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">],</span><span class=\"w\">\n    </span><span class=\"nl\">\"ResponseMetadata\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>文章が日本語であるということを検出しています。</p>\n\n<h2>\n<span id=\"感情の分析\" class=\"fragment\"></span><a href=\"#%E6%84%9F%E6%83%85%E3%81%AE%E5%88%86%E6%9E%90\"><i class=\"fa fa-link\"></i></a>感情の分析</h2>\n\n<p>次にconprehendを用いて感情の分析を行なって行きましょう。<br>\n文章は先ほどの文章で分析を行なって行きます。</p>\n\n<p>感情分析を行うpythonファイルの概要<br>\n①ライブラリのインポート<br>\n②comprehend作成<br>\n③感情分析と表示</p>\n\n<div class=\"code-frame\" data-lang=\"python\">\n<div class=\"code-lang\"><span class=\"bold\">comp_sentiment.py</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">comprehend</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"p\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s\">'comprehend'</span><span class=\"p\">,</span><span class=\"s\">'ap-northeast-1'</span><span class=\"p\">)</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"私はこれから起こる出来事を楽しみにしています。\"</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">comprehend</span><span class=\"p\">.</span><span class=\"n\">detect_sentiment</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"o\">=</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">LanguageCode</span><span class=\"o\">=</span><span class=\"s\">'ja'</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div>\n</div>\n\n<p>comp_sentiment.pyを実行</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>python comp_sentiment.py\n</code></pre></div></div>\n\n<h3>\n<span id=\"実行結果-1\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-1\"><i class=\"fa fa-link\"></i></a>実行結果</h3>\n\n<div class=\"code-frame\" data-lang=\"json\"><div class=\"highlight\"><pre><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"Sentiment\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"POSITIVE\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"SentimentScore\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"Positive\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.9983951449394226</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"Negative\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.0002934910589829087</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"Neutral\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.0013023141073063016</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"Mixed\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">9.037842573889066e-06</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>文章が肯定的であるという結果になりました。<br>\n他にも文章によっては否定的(Negative),中立的(Neutral),混じった感情(Mixed)というスコアが与えられています。<br>\nこの文章は肯定的というのは正しい結論と言える。</p>\n\n<h2>\n<span id=\"csvファイルの感情を分析してみる\" class=\"fragment\"></span><a href=\"#csv%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E6%84%9F%E6%83%85%E3%82%92%E5%88%86%E6%9E%90%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>CSVファイルの感情を分析してみる</h2>\n\n<p>最後にcsvファイルの文章の感情分析を行なって行きましょう。</p>\n\n<p>以下のcsvファイルの感情分析を行なって行きます。</p>\n\n<div class=\"code-frame\" data-lang=\"csv\">\n<div class=\"code-lang\"><span class=\"bold\">sentiment.csv</span></div>\n<div class=\"highlight\"><pre><code>その結果は素晴らしいですね。\nその料金は高いです。\n今回ご契約いただくのはお得ですね。\n料金は高いですが、サービスが素晴らしいのですね。\n</code></pre></div>\n</div>\n\n<p>csvファイルの感情分析を行うpythonファイルの概要<br>\n①ライブラリのインポート<br>\n②comprehendの作成<br>\n③csvファイルを開きfor文で1行ずつ分析<br>\n④原文と分析結果、スコアの表示</p>\n\n<div class=\"code-frame\" data-lang=\"python\">\n<div class=\"code-lang\"><span class=\"bold\">comp_sentiment_csv.py</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">csv</span>\n\n<span class=\"n\">comprehend</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"p\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s\">'comprehend'</span><span class=\"p\">,</span> <span class=\"s\">'ap-northeast-1'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'sentiment.csv'</span><span class=\"p\">,</span> <span class=\"s\">'r'</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s\">'utf-8'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"nb\">file</span><span class=\"p\">:</span>\n  <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"p\">.</span><span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"nb\">file</span><span class=\"p\">):</span>\n    <span class=\"n\">result_comp</span> <span class=\"o\">=</span> <span class=\"n\">comprehend</span><span class=\"p\">.</span><span class=\"n\">detect_sentiment</span><span class=\"p\">(</span>\n    <span class=\"n\">Text</span><span class=\"o\">=</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">LanguageCode</span><span class=\"o\">=</span><span class=\"s\">'ja'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result_comp</span><span class=\"p\">[</span><span class=\"s\">'Sentiment'</span><span class=\"p\">])</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">result_comp</span><span class=\"p\">[</span><span class=\"s\">'SentimentScore'</span><span class=\"p\">].</span><span class=\"n\">items</span><span class=\"p\">():</span>\n      <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">' {:10} {}'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n   <span class=\"k\">print</span><span class=\"p\">()</span>\n</code></pre></div>\n</div>\n\n<p>comp_sentiment_csv.pyを実行</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>python comp_sentiment_csv.py\n</code></pre></div></div>\n\n<h3>\n<span id=\"実行結果-2\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-2\"><i class=\"fa fa-link\"></i></a>実行結果</h3>\n\n<div class=\"code-frame\" data-lang=\"csv\"><div class=\"highlight\"><pre><code>その結果は素晴らしいですね。\nPOSITIVE\n Positive   0.9997738003730774\n Negative   3.3891989005496725e-05\n Neutral    0.0001706768525764346\n Mixed      2.1686157197109424e-05\n\nその料金は高いです。\nNEGATIVE\n Positive   0.11720975488424301\n Negative   0.8386894464492798\n Neutral    0.04406021162867546\n Mixed      4.061001163790934e-05\n\n今回ご契約いただくのはお得ですね。\nPOSITIVE\n Positive   0.989083468914032\n Negative   0.002980673685669899\n Neutral    0.007930162362754345\n Mixed      5.5876575970614795e-06\n\n料金は高いですが、品質が素晴らしいのですね。\nMIXED\n Positive   0.20779219269752502\n Negative   8.993058872874826e-05\n Neutral    8.160676225088537e-05\n Mixed      0.7920363545417786\n\n</code></pre></div></div>\n\n<p>実行結果をみると各文章の肯定か否定かそれとも混じった感情かが結果として表示されてます。また各感情のスコアも表示されています。<br>\n(eは自然対数のため、3.3891989005496725e-05はpythonで0.0000338920となります)</p>\n\n<p>自然対数の解説はこちら<br>\n<a href=\"https://jibundex.com/python/okasii-suji\" rel=\"nofollow noopener\" target=\"_blank\">Pythonで数字がおかしくなる 3.209e-05って何？ 浮動小数点と解決方法</a></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>今回はcomprehendを用いて文章から感情を分析してみました。comprehendは大手のtranscribeと組み合わせてコールセンターの顧客分析に用いられているようです。</p>\n\n<h2>\n<span id=\"引用\" class=\"fragment\"></span><a href=\"#%E5%BC%95%E7%94%A8\"><i class=\"fa fa-link\"></i></a>引用</h2>\n\n<p><a href=\"https://jibundex.com/python/okasii-suji\" rel=\"nofollow noopener\" target=\"_blank\">Pythonで数字がおかしくなる 3.209e-05って何？ 浮動小数点と解決方法</a></p>\n\n<h2>\n<span id=\"参考文献\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><i class=\"fa fa-link\"></i></a>参考文献</h2>\n\n<p>この記事は以下の情報を参考にして執筆しました<br>\n<a href=\"https://www.amazon.co.jp/AWS%E3%81%A7%E3%81%A4%E3%81%8F%E3%82%8B-AI%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E6%9D%BE%E6%B5%A6-%E5%81%A5%E4%B8%80%E9%83%8E/dp/4798059056\" rel=\"nofollow noopener\" target=\"_blank\">AWSでつくるAIプログラミング入門</a></p>\n",
    "body": "##Comprehendとは\n>自然言語処理を行うAIサービスです。主に①言語検出、②感情分析、③キーフレーズ抽出、④エンティティ認識、⑤構文解析の処理を行い情報を取得することができます。\n\n今回は①の言語検出と②の感情分析を紹介させていただきます。\n\n\n##言語の検出\n初めに言語の検出を実行して行きます。\n\n以下の文章の言語を検出します。\n\n\n>私はこれから起こる出来事を楽しみにしています。\n\n\nこの文章の言語を検出して行きましょう。\n\n検出するpythonファイルの概要\n①ライブラリのインポート\n②comprehend作成\n③言語検出と表示\n\n```comp_japanese.py\nimport boto3\nimport json\n\ncomprehend = boto3.client('comprehend', 'ap-northeast-1')\ntext = \"私はこれから起こる出来事を楽しみにしています。\"\nresult = comprehend.detect_dominant_language(Text=text)\nprint(json.dumps(result, indent=4))\n\n```\n\ncomp_japanese.pyを実行します。\n\n```\npython comp_japanese.py\n```\n\n###実行結果\n\n```json\n{\n    \"Languages\": [\n        {\n            \"LanguageCode\": \"ja\",\n            \"Score\": 1.0\n        }\n    ],\n    \"ResponseMetadata\": {\n```\n\n文章が日本語であるということを検出しています。\n\n##感情の分析\n次にconprehendを用いて感情の分析を行なって行きましょう。\n文章は先ほどの文章で分析を行なって行きます。\n\n感情分析を行うpythonファイルの概要\n①ライブラリのインポート\n②comprehend作成\n③感情分析と表示\n\n```comp_sentiment.py\nimport boto3\nimport json\n\ncomprehend = boto3.client('comprehend','ap-northeast-1')\ntext = \"私はこれから起こる出来事を楽しみにしています。\"\nresult = comprehend.detect_sentiment(Text=text, LanguageCode='ja')\nprint(json.dumps(result, indent=4))\n```\ncomp_sentiment.pyを実行\n\n```\npython comp_sentiment.py\n```\n\n###実行結果\n\n```json\n{\n    \"Sentiment\": \"POSITIVE\",\n    \"SentimentScore\": {\n        \"Positive\": 0.9983951449394226,\n        \"Negative\": 0.0002934910589829087,\n        \"Neutral\": 0.0013023141073063016,\n        \"Mixed\": 9.037842573889066e-06\n    },\n```\n\n文章が肯定的であるという結果になりました。\n他にも文章によっては否定的(Negative),中立的(Neutral),混じった感情(Mixed)というスコアが与えられています。\nこの文章は肯定的というのは正しい結論と言える。\n\n##CSVファイルの感情を分析してみる\n最後にcsvファイルの文章の感情分析を行なって行きましょう。\n\n以下のcsvファイルの感情分析を行なって行きます。\n\n```sentiment.csv\nその結果は素晴らしいですね。\nその料金は高いです。\n今回ご契約いただくのはお得ですね。\n料金は高いですが、サービスが素晴らしいのですね。\n```\n\n\n\ncsvファイルの感情分析を行うpythonファイルの概要\n①ライブラリのインポート\n②comprehendの作成\n③csvファイルを開きfor文で1行ずつ分析\n④原文と分析結果、スコアの表示\n\n\n```comp_sentiment_csv.py\nimport boto3\nimport csv\n\ncomprehend = boto3.client('comprehend', 'ap-northeast-1')\nwith open('sentiment.csv', 'r', encoding='utf-8') as file:\n  for row in csv.reader(file):\n    result_comp = comprehend.detect_sentiment(\n    Text=row[0], LanguageCode='ja')\n\n    print(row[0])\n    print(result_comp['Sentiment'])\n    for key, value in result_comp['SentimentScore'].items():\n      print(' {:10} {}'.format(key, value))\n   print()\n``` \n\ncomp_sentiment_csv.pyを実行\n\n```\npython comp_sentiment_csv.py\n```\n\n###実行結果\n\n```csv\nその結果は素晴らしいですね。\nPOSITIVE\n Positive   0.9997738003730774\n Negative   3.3891989005496725e-05\n Neutral    0.0001706768525764346\n Mixed      2.1686157197109424e-05\n\nその料金は高いです。\nNEGATIVE\n Positive   0.11720975488424301\n Negative   0.8386894464492798\n Neutral    0.04406021162867546\n Mixed      4.061001163790934e-05\n\n今回ご契約いただくのはお得ですね。\nPOSITIVE\n Positive   0.989083468914032\n Negative   0.002980673685669899\n Neutral    0.007930162362754345\n Mixed      5.5876575970614795e-06\n\n料金は高いですが、品質が素晴らしいのですね。\nMIXED\n Positive   0.20779219269752502\n Negative   8.993058872874826e-05\n Neutral    8.160676225088537e-05\n Mixed      0.7920363545417786\n\n```\n\n実行結果をみると各文章の肯定か否定かそれとも混じった感情かが結果として表示されてます。また各感情のスコアも表示されています。\n(eは自然対数のため、3.3891989005496725e-05はpythonで0.0000338920となります)\n\n自然対数の解説はこちら\n[Pythonで数字がおかしくなる 3.209e-05って何？ 浮動小数点と解決方法](https://jibundex.com/python/okasii-suji)\n\n\n##まとめ\n今回はcomprehendを用いて文章から感情を分析してみました。comprehendは大手のtranscribeと組み合わせてコールセンターの顧客分析に用いられているようです。\n\n##引用\n[Pythonで数字がおかしくなる 3.209e-05って何？ 浮動小数点と解決方法](https://jibundex.com/python/okasii-suji)\n\n##参考文献\nこの記事は以下の情報を参考にして執筆しました\n[AWSでつくるAIプログラミング入門](https://www.amazon.co.jp/AWS%E3%81%A7%E3%81%A4%E3%81%8F%E3%82%8B-AI%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E6%9D%BE%E6%B5%A6-%E5%81%A5%E4%B8%80%E9%83%8E/dp/4798059056)\n\n\n\n\n\n\n\n\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T12:41:45+09:00",
    "group": null,
    "id": "9afcad26d3b177ee2112",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Python",
        "versions": []
      },
      {
        "name": "AWS",
        "versions": []
      },
      {
        "name": "aws-cli",
        "versions": []
      },
      {
        "name": "AI",
        "versions": []
      }
    ],
    "title": "AWSでAIサービスを使ってみる~⑧comprehend編~",
    "updated_at": "2021-08-25T12:46:11+09:00",
    "url": "https://qiita.com/AInosukey/items/9afcad26d3b177ee2112",
    "user": {
      "description": "",
      "facebook_id": "",
      "followees_count": 2,
      "followers_count": 1,
      "github_login_name": null,
      "id": "AInosukey",
      "items_count": 8,
      "linkedin_id": "",
      "location": "",
      "name": "AIノ助",
      "organization": "",
      "permanent_id": 1658175,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1658175/37d2d6dc538b833a3c4f43563e4adab3d9a3c4b2/large.png?1623918708",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h2>\n<span id=\"問題点\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\"><i class=\"fa fa-link\"></i></a>問題点</h2>\n\n<p>Jetpack ComposeのTabRowのbackgroundにwhiteを指定しているのになぜかグレーになってしまったり、正常に白色にならない場合があります。<br>\n例えばこんな感じです。</p>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">TabPage</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"py\">selectedTabIndex</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n    <span class=\"nc\">TabRow</span><span class=\"p\">(</span>\n        <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span><span class=\"p\">,</span>\n        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n            <span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">()</span>\n            <span class=\"p\">.</span><span class=\"nf\">height</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">),</span>\n        <span class=\"n\">backgroundColor</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">White</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nc\">Tab</span><span class=\"p\">(</span>\n            <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"mi\">0</span> <span class=\"p\">},</span>\n            <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Tab1\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"nc\">Tab</span><span class=\"p\">(</span>\n            <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n            <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Tab2\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://camo.qiitausercontent.com/d4b09addf1a079615eeb8c423baea8debcb04882/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3136363632392f31346265303730382d316433632d663931642d343962312d6265303734313564393734642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F166629%2F14be0708-1d3c-f91d-49b1-be07415d974d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=34f60427bf20c2de2be032628b450fa3\" width=\"320\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166629/14be0708-1d3c-f91d-49b1-be07415d974d.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F166629%2F14be0708-1d3c-f91d-49b1-be07415d974d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=af9e136f750576a4c97f77d29fb19b8e 1x\" loading=\"lazy\"></a></p>\n\n<p>きちんと <code>backgroundColor = Color.White</code> に指定しているにも関わらずグレーになってしまっています。<br>\nここでさらにボーダーの色を変えたいなどでContentColorも指定すると、背景色がそちらに引っ張られてしまいます。</p>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">TabPage</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"py\">selectedTabIndex</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n    <span class=\"nc\">TabRow</span><span class=\"p\">(</span>\n        <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span><span class=\"p\">,</span>\n        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n            <span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">()</span>\n            <span class=\"p\">.</span><span class=\"nf\">height</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">),</span>\n        <span class=\"n\">backgroundColor</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">White</span>\n        <span class=\"n\">contentColor</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">Magenta</span><span class=\"p\">,</span> <span class=\"c1\">// ← 文字色やボーダーの色指定</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nc\">Tab</span><span class=\"p\">(</span>\n            <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"mi\">0</span> <span class=\"p\">},</span>\n            <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Tab1\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"nc\">Tab</span><span class=\"p\">(</span>\n            <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n            <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Tab2\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://camo.qiitausercontent.com/c09b92bdacc4056a81807bbf78850d3ffe511c39/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3136363632392f36396665386632332d333930302d623933352d323839312d3164343635343632373861322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F166629%2F69fe8f23-3900-b935-2891-1d46546278a2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f1dc25521160796302eb3c38ddbaef9f\" width=\"320\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166629/69fe8f23-3900-b935-2891-1d46546278a2.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F166629%2F69fe8f23-3900-b935-2891-1d46546278a2.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d268819496a2f081790b1682bfb5bbd4 1x\" loading=\"lazy\"></a></p>\n\n<p>どう見てもbackgroundColorが正常に動作していません。。<br>\nContentColorも、本来は文字色とインジケーターの色などに作用するだけのはずが背景色にも影響してしまっています。<br>\n背景色を白にしたいケースは非常に多いと思うのですが、これでは詰んでしまって進みません😭</p>\n\n<h2>\n<span id=\"解決策\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E7%AD%96\"><i class=\"fa fa-link\"></i></a>解決策</h2>\n\n<p>StackOverflowの同様の問題のスレッドに解決策を載せてくれている人がいました💡<br>\n（自分が見たときは解決策はなかったのですが定期的にチェックしてたら書き込みしてくれている人がいました）</p>\n\n<p><qiita-embed-ogp src=\"https://stackoverflow.com/questions/68270720/android-jetpack-compose-white-tabrow/68844290#68844290?newreg=77e87433f2bf4b558d024e6dca251af4\"></qiita-embed-ogp></p>\n\n<p>なんと、原因はTabRowのModifierにheightを指定していたことでした（なんで）</p>\n\n<p>先程のコードではTabRowのmodifierの部分で50dpの高さを指定していました。ここが悪さをするみたいです。<br>\n試しにこのheightを削除して動作させてみると正常に背景が白になりました！</p>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">TabPage</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"py\">selectedTabIndex</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n    <span class=\"nc\">TabRow</span><span class=\"p\">(</span>\n        <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span><span class=\"p\">,</span>\n        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">(),</span> <span class=\"c1\">// ここでheightを指定してはいけない</span>\n        <span class=\"n\">backgroundColor</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">White</span><span class=\"p\">,</span>\n        <span class=\"n\">contentColor</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">Magenta</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nc\">Tab</span><span class=\"p\">(</span>\n            <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"mi\">0</span> <span class=\"p\">},</span>\n            <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Tab1\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"nc\">Tab</span><span class=\"p\">(</span>\n            <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n            <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Tab2\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://camo.qiitausercontent.com/0431f21a3f52508d971e281b0b32cde1011dedee/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3136363632392f32613230323464332d666564322d356661302d656133642d6439633739666639343061352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F166629%2F2a2024d3-fed2-5fa0-ea3d-d9c79ff940a5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d40339cd613f8d25076c95105ab16284\" width=\"320\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166629/2a2024d3-fed2-5fa0-ea3d-d9c79ff940a5.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F166629%2F2a2024d3-fed2-5fa0-ea3d-d9c79ff940a5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=18bc63ed449a57362da744b77c824c49 1x\" loading=\"lazy\"></a></p>\n\n<p>でもこれだと高さの指定ができていません。<br>\n高さの指定をするときはTabRowではなく、Tabのほうに指定すればいいみたいです。</p>\n\n<div class=\"code-frame\" data-lang=\"kotlin\"><div class=\"highlight\"><pre><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">TabPage</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"py\">selectedTabIndex</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n    <span class=\"nc\">TabRow</span><span class=\"p\">(</span>\n        <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span><span class=\"p\">,</span>\n        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">(),</span>\n        <span class=\"n\">backgroundColor</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">White</span><span class=\"p\">,</span>\n        <span class=\"n\">contentColor</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">Magenta</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nc\">Tab</span><span class=\"p\">(</span>\n            <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">height</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">),</span>\n            <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"mi\">0</span> <span class=\"p\">},</span>\n            <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Tab1\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"nc\">Tab</span><span class=\"p\">(</span>\n            <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">height</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">),</span>\n            <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">selectedTabIndex</span> <span class=\"p\">=</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n            <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Tab2\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><a href=\"https://camo.qiitausercontent.com/8dda388dd786b8c554d40578f05b780f6b946c2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3136363632392f31363637653239632d396265382d633365632d623335322d3364636639343563353564302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F166629%2F1667e29c-9be8-c3ec-b352-3dcf945c55d0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=58f8fc7ac4eab8519ff08357a41e85aa\" width=\"320\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166629/1667e29c-9be8-c3ec-b352-3dcf945c55d0.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F166629%2F1667e29c-9be8-c3ec-b352-3dcf945c55d0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9042a687a33d5e8ebd4f302017a15b98 1x\" loading=\"lazy\"></a></p>\n",
    "body": "## 問題点\n\nJetpack ComposeのTabRowのbackgroundにwhiteを指定しているのになぜかグレーになってしまったり、正常に白色にならない場合があります。\n例えばこんな感じです。\n\n```kotlin\n@Composable\nfun TabPage() {\n    var selectedTabIndex by remember { mutableStateOf(0) }\n\n    TabRow(\n        selectedTabIndex = selectedTabIndex,\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(50.dp),\n        backgroundColor = Color.White\n    ) {\n        Tab(\n            selected = selectedTabIndex == 0,\n            onClick = { selectedTabIndex = 0 },\n            text = { Text(\"Tab1\") }\n        )\n        Tab(\n            selected = selectedTabIndex == 1,\n            onClick = { selectedTabIndex = 1 },\n            text = { Text(\"Tab2\") }\n        )\n    }\n}\n```\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166629/14be0708-1d3c-f91d-49b1-be07415d974d.png\" width=320 />\n\nきちんと `backgroundColor = Color.White` に指定しているにも関わらずグレーになってしまっています。\nここでさらにボーダーの色を変えたいなどでContentColorも指定すると、背景色がそちらに引っ張られてしまいます。\n\n```kotlin\n@Composable\nfun TabPage() {\n    var selectedTabIndex by remember { mutableStateOf(0) }\n\n    TabRow(\n        selectedTabIndex = selectedTabIndex,\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(50.dp),\n        backgroundColor = Color.White\n        contentColor = Color.Magenta, // ← 文字色やボーダーの色指定\n    ) {\n        Tab(\n            selected = selectedTabIndex == 0,\n            onClick = { selectedTabIndex = 0 },\n            text = { Text(\"Tab1\") }\n        )\n        Tab(\n            selected = selectedTabIndex == 1,\n            onClick = { selectedTabIndex = 1 },\n            text = { Text(\"Tab2\") }\n        )\n    }\n}\n```\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166629/69fe8f23-3900-b935-2891-1d46546278a2.png\" width=320 />\n\nどう見てもbackgroundColorが正常に動作していません。。\nContentColorも、本来は文字色とインジケーターの色などに作用するだけのはずが背景色にも影響してしまっています。\n背景色を白にしたいケースは非常に多いと思うのですが、これでは詰んでしまって進みません😭\n\n## 解決策\n\nStackOverflowの同様の問題のスレッドに解決策を載せてくれている人がいました💡\n（自分が見たときは解決策はなかったのですが定期的にチェックしてたら書き込みしてくれている人がいました）\n\nhttps://stackoverflow.com/questions/68270720/android-jetpack-compose-white-tabrow/68844290#68844290?newreg=77e87433f2bf4b558d024e6dca251af4\n\nなんと、原因はTabRowのModifierにheightを指定していたことでした（なんで）\n\n先程のコードではTabRowのmodifierの部分で50dpの高さを指定していました。ここが悪さをするみたいです。\n試しにこのheightを削除して動作させてみると正常に背景が白になりました！\n\n```kotlin\n@Composable\nfun TabPage() {\n    var selectedTabIndex by remember { mutableStateOf(0) }\n\n    TabRow(\n        selectedTabIndex = selectedTabIndex,\n        modifier = Modifier.fillMaxWidth(), // ここでheightを指定してはいけない\n        backgroundColor = Color.White,\n        contentColor = Color.Magenta,\n    ) {\n        Tab(\n            selected = selectedTabIndex == 0,\n            onClick = { selectedTabIndex = 0 },\n            text = { Text(\"Tab1\") }\n        )\n        Tab(\n            selected = selectedTabIndex == 1,\n            onClick = { selectedTabIndex = 1 },\n            text = { Text(\"Tab2\") }\n        )\n    }\n}\n```\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166629/2a2024d3-fed2-5fa0-ea3d-d9c79ff940a5.png\" width=320 />\n\nでもこれだと高さの指定ができていません。\n高さの指定をするときはTabRowではなく、Tabのほうに指定すればいいみたいです。\n\n```kotlin\n@Composable\nfun TabPage() {\n    var selectedTabIndex by remember { mutableStateOf(0) }\n\n    TabRow(\n        selectedTabIndex = selectedTabIndex,\n        modifier = Modifier.fillMaxWidth(),\n        backgroundColor = Color.White,\n        contentColor = Color.Magenta,\n    ) {\n        Tab(\n            modifier = Modifier.height(100.dp),\n            selected = selectedTabIndex == 0,\n            onClick = { selectedTabIndex = 0 },\n            text = { Text(\"Tab1\") }\n        )\n        Tab(\n            modifier = Modifier.height(100.dp),\n            selected = selectedTabIndex == 1,\n            onClick = { selectedTabIndex = 1 },\n            text = { Text(\"Tab2\") }\n        )\n    }\n}\n```\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166629/1667e29c-9be8-c3ec-b352-3dcf945c55d0.png\" width=320 />\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T12:39:55+09:00",
    "group": null,
    "id": "15ffad2c66a642746679",
    "likes_count": 3,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "Android",
        "versions": []
      },
      {
        "name": "JetpackCompose",
        "versions": []
      }
    ],
    "title": "【Jetpack Compose】TabRowの背景色がWhiteにならない場合",
    "updated_at": "2021-08-25T12:39:55+09:00",
    "url": "https://qiita.com/yasukotelin/items/15ffad2c66a642746679",
    "user": {
      "description": "Android developer\r\nエディタのカラーテーマを作ったりもしています。",
      "facebook_id": "",
      "followees_count": 15,
      "followers_count": 12,
      "github_login_name": "yasukotelin",
      "id": "yasukotelin",
      "items_count": 19,
      "linkedin_id": "",
      "location": "Tokyo",
      "name": "yasukotelin",
      "organization": "",
      "permanent_id": 166629,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166629/profile-images/1561513783",
      "team_only": false,
      "twitter_screen_name": "yasukotelin",
      "website_url": "https://note.mu/yasukotelin"
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"発生した問題\" class=\"fragment\"></span><a href=\"#%E7%99%BA%E7%94%9F%E3%81%97%E3%81%9F%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>発生した問題</h1>\n\n<p>rubyのセットアップを自動化するshellscriptを作成し実行したところ、処理が途中で止まってしまった。</p>\n\n<h1>\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n\n<p>bash_profileに設定を追記したあと、設定を反映させるためにshellを再起動させようとした。<br>\nどうやらシェルを再起動させてしまったがためにshellscriptが途中で止まってしまったらしい。<br>\n以下該当のソース</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>echo 'eval \"$(rbenv init -)\"' &gt;&gt; ~/.bash_profile\nexec $SHELL -l    # ここで処理が中断、理由はシェルが再起動されたから\nrbenv --version   # この行は実行されなかった\n</code></pre></div></div>\n\n<h1>\n<span id=\"対策\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E7%AD%96\"><i class=\"fa fa-link\"></i></a>対策</h1>\n\n<p><code>exec $SHELL -l</code>の箇所を<code>source ~/.bash_profile</code>に置き換えました。シェルを再起動して設定を反映されるのではなくsourceで明示的に設定ファイルを読み込ませる。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\">\n<div class=\"code-lang\"><span class=\"bold\">before</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nb\">echo</span> <span class=\"s1\">'eval \"$(rbenv init -)\"'</span> <span class=\"o\">&gt;&gt;</span> ~/.bash_profile\n<span class=\"nb\">exec</span> <span class=\"nv\">$SHELL</span> <span class=\"nt\">-l</span>\nrbenv <span class=\"nt\">--version</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"shell\">\n<div class=\"code-lang\"><span class=\"bold\">after</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nb\">echo</span> <span class=\"s1\">'eval \"$(rbenv init -)\"'</span> <span class=\"o\">&gt;&gt;</span> ~/.bash_profile\n<span class=\"nb\">source</span> ~/.bash_profile\nrbenv <span class=\"nt\">--version</span>\n</code></pre></div>\n</div>\n\n<h1>\n<span id=\"教訓\" class=\"fragment\"></span><a href=\"#%E6%95%99%E8%A8%93\"><i class=\"fa fa-link\"></i></a>教訓</h1>\n\n<p>コマンドの挙動をちゃんと理解してからスクリプトを書くと誓った。</p>\n",
    "body": "# 発生した問題\nrubyのセットアップを自動化するshellscriptを作成し実行したところ、処理が途中で止まってしまった。\n\n# 原因\nbash_profileに設定を追記したあと、設定を反映させるためにshellを再起動させようとした。\nどうやらシェルを再起動させてしまったがためにshellscriptが途中で止まってしまったらしい。\n以下該当のソース\n\n```\necho 'eval \"$(rbenv init -)\"' >> ~/.bash_profile\nexec $SHELL -l    # ここで処理が中断、理由はシェルが再起動されたから\nrbenv --version   # この行は実行されなかった\n```\n\n# 対策\n<code>exec $SHELL -l</code>の箇所を<code>source ~/.bash_profile</code>に置き換えました。シェルを再起動して設定を反映されるのではなくsourceで明示的に設定ファイルを読み込ませる。\n\n```shell:before\necho 'eval \"$(rbenv init -)\"' >> ~/.bash_profile\nexec $SHELL -l\nrbenv --version\n```\n\n```shell:after\necho 'eval \"$(rbenv init -)\"' >> ~/.bash_profile\nsource ~/.bash_profile\nrbenv --version\n```\n\n# 教訓\nコマンドの挙動をちゃんと理解してからスクリプトを書くと誓った。\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T12:36:39+09:00",
    "group": null,
    "id": "a324bc27dd304d8fb5d6",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "ShellScript",
        "versions": []
      }
    ],
    "title": "ShellScriptでbash_profileを読み込ませようとしたら止まった",
    "updated_at": "2021-08-25T12:36:39+09:00",
    "url": "https://qiita.com/i13602/items/a324bc27dd304d8fb5d6",
    "user": {
      "description": "SEの端くれ。SESでAWSいじって、自社開発でRails書いてます。学歴社会で詰んでます。",
      "facebook_id": "",
      "followees_count": 37,
      "followers_count": 7,
      "github_login_name": "i13602",
      "id": "i13602",
      "items_count": 3,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 159495,
      "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/159495/profile-images/1507653673",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h1>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n\n<p>これは私が今サーバーとして運用しているThinkStation S30についての備忘録です。<br>\nS30についてはネット上に情報が散見されるだけで（だいたい英語だし）、まとまった記事がないので、どなたかのお役に立てれば幸いです。</p>\n\n<h1>\n<span id=\"この記事を参考にする前に\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%82%92%E5%8F%82%E8%80%83%E3%81%AB%E3%81%99%E3%82%8B%E5%89%8D%E3%81%AB\"><i class=\"fa fa-link\"></i></a>この記事を参考にする前に</h1>\n\n<p>まずはCMOSクリアをしてください。だいたいの悩みはそれで解決します。<br>\nまた、マザーボードのバージョンは4351~と0567~の二種類があります。自分のがどちらかを把握しておいてください（筆者のは0567~）</p>\n\n<h1>\n<span id=\"各エラーコードごとの対応またなにかあったら追記\" class=\"fragment\"></span><a href=\"#%E5%90%84%E3%82%A8%E3%83%A9%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E3%81%94%E3%81%A8%E3%81%AE%E5%AF%BE%E5%BF%9C%E3%81%BE%E3%81%9F%E3%81%AA%E3%81%AB%E3%81%8B%E3%81%82%E3%81%A3%E3%81%9F%E3%82%89%E8%BF%BD%E8%A8%98\"><i class=\"fa fa-link\"></i></a>各エラーコードごとの対応（またなにかあったら追記）</h1>\n\n<p>b2,b7,b9:だいたいメモリ関連。プライマリのスロットに一枚だけ挿して、うまくいってから増やしてください。<br>\nF2:ジャンパピンを2-3スロットにさしてると発生。このときはリカバリ用のディスクを探しているので、マザボのバージョンに合ったBIOSを焼いてください。<br>\n62:BIOSの破損？焼きなおしましょう</p>\n\n<h1>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h1>\n\n<p>一回起動するとかなり安定します。それまで苦労しますが。</p>\n",
    "body": "#はじめに\nこれは私が今サーバーとして運用しているThinkStation S30についての備忘録です。\nS30についてはネット上に情報が散見されるだけで（だいたい英語だし）、まとまった記事がないので、どなたかのお役に立てれば幸いです。\n\n#この記事を参考にする前に\nまずはCMOSクリアをしてください。だいたいの悩みはそれで解決します。\nまた、マザーボードのバージョンは4351~と0567~の二種類があります。自分のがどちらかを把握しておいてください（筆者のは0567~）\n\n#各エラーコードごとの対応（またなにかあったら追記）\nb2,b7,b9:だいたいメモリ関連。プライマリのスロットに一枚だけ挿して、うまくいってから増やしてください。\nF2:ジャンパピンを2-3スロットにさしてると発生。このときはリカバリ用のディスクを探しているので、マザボのバージョンに合ったBIOSを焼いてください。\n62:BIOSの破損？焼きなおしましょう\n\n#おわりに\n一回起動するとかなり安定します。それまで苦労しますが。\n\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T12:14:51+09:00",
    "group": null,
    "id": "8f695a4b33d22fc0d850",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "サーバー",
        "versions": []
      },
      {
        "name": "Lenovo",
        "versions": []
      },
      {
        "name": "ThinkStation",
        "versions": []
      },
      {
        "name": "S30",
        "versions": []
      }
    ],
    "title": "【備忘録】ThinkStation S30の諸々の設定方法",
    "updated_at": "2021-08-25T12:14:51+09:00",
    "url": "https://qiita.com/HaKo/items/8f695a4b33d22fc0d850",
    "user": {
      "description": "つれづれなるままにかきます。ご意見ありましたらいただけると喜びます。",
      "facebook_id": "",
      "followees_count": 4,
      "followers_count": 2,
      "github_login_name": null,
      "id": "HaKo",
      "items_count": 3,
      "linkedin_id": "",
      "location": "東京",
      "name": "HK",
      "organization": "UEC",
      "permanent_id": 114507,
      "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/114507/profile-images/1561457917",
      "team_only": false,
      "twitter_screen_name": "HK_fatman",
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "<p>今回は静的サイトのテスト環境として設定していく手順のメモです。<br>\n※コンソール画面の構成が変わりやすいので画面キャプチャは載せない形で書いてみました。(2021/8執筆)<br>\n構成やボタンなどは同じものも多いので適宜似た単語などを探して進めてみてください。</p>\n\n<p>このハンズオンを最後まで進めると<br>\nお名前ドットコム　→ Route 53　→ S3の形式（http）で<br>\n静的なサイト公開までが実現できます。</p>\n\n<h1>\n<span id=\"１ドメインレジストラを決める\" class=\"fragment\"></span><a href=\"#%EF%BC%91%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%AC%E3%82%B8%E3%82%B9%E3%83%88%E3%83%A9%E3%82%92%E6%B1%BA%E3%82%81%E3%82%8B\"><i class=\"fa fa-link\"></i></a>１．ドメインレジストラを決める</h1>\n\n<p>ドメインレジストラはお名前ドットコムにしました。AWSでも取得できますがここは好みで良いと思います。ドメインをまず取得します。</p>\n\n<h1>\n<span id=\"２s3バケットを作成します\" class=\"fragment\"></span><a href=\"#%EF%BC%92s3%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%BE%E3%81%99\"><i class=\"fa fa-link\"></i></a>２．S3バケットを作成します</h1>\n\n<p>ウェブサイトをS3で公開する場合はバケット名とウェブサイトのドメインを合わせる必要があります。今回はwww.example.comという前提で進めます。<br>\n　１．S3コンソール画面から[バケットを作成]ボタンをクリックします。<br>\n　２．バケット名にwww.example.comと入力<br>\n　　　リージョンにap-northeast-1と入力<br>\n　　　あとはとりあえずデフォルトで[バケットを作成]ボタンをクリックします。<br>\n　３．ここからバケットの設定を進めます。作成した[バケット名]をクリックします。<br>\n　４．[プロパティ]タブをクリックします。一番下の静的ウェブサイトホスティングの[編集]をクリックします。<br>\n　　　[有効にする]にチェックを入れます。<br>\n　　　インデックスドキュメントに[index.html]<br>\n　　　エラードキュメントに[error.html]を入力します。<br>\n　　　index.htmlはドメインにアクセスした時に表示されるトップページのhtmlファイル名<br>\n　　　error.htmlは404エラーなどが起こった際に表示されるエラーページのhtmlファイル名で<br>\n　　　後ほどこの名前でファイルを作成してアップロードします。<br>\n　　　他の設定はデフォルトで[変更の保存]をクリックします。<br>\n　５．index.htmlを作成しアップロードします。<br>\n　　　S3コンソールからバケット名をクリックし[アップロード]ボタンを押します。<br>\n　６．パブリックアクセスブロックの設定を解除します。<br>\n　　　[アクセス許可]のタブからブロックパブリックアクセスの[編集]をクリックして<br>\n　　　パブリックアクセスをすべてブロックを[オフ]に設定します。<br>\n　７．バケットへのアクセス権（バケットポリシー）を編集します。<br>\n　　　[アクセス許可]のタブをクリックします。<br>\n　　　バケットポリシーの[編集]をクリックします。<br>\n　　　まずバケットARNをコピーします。<br>\n　　　ポリシージェネレータで以下のように設定します。<br>\n　　　<br>\n　　　バケットARNはコピーしたものを貼り付けます。<br>\n　　　貼り付けたら/<em>を追加し、\"Resource\": \"arn:aws:s3:::<a href=\"http://www.example.com/\" rel=\"nofollow noopener\" target=\"_blank\">www.example.com/</a></em>\",　のような形にします。<br>\n　　　[Add Statement]　→　[Generate Policy]とクリックすると<br>\n　　　yamlが生成されるのでそれをコピーします。<br>\n　　　バケットポリシーの編集タブに戻ってポリシーの部分にyamlを貼り付けます。<br>\n　　　Sidの項目を後でわかりやすいように書き換えておきます。<br>\n　　　ここでは次の名前にしておきます。[PublicReadForGetBucketObjects]<br>\n　　　※Sidはポリシー内でかぶっていなければ自由につけても良い識別子です。<br>\n　８．[プロパティ]タブ最下部の[パブリックウェブサイトエンドポイント]のURLをクリックすると<br>\n　　　ひとまずhtmlの内容がブラウザから見られるはずです。</p>\n\n<h1>\n<span id=\"３route-53の設定で独自ドメインでs3のhtmlを表示\" class=\"fragment\"></span><a href=\"#%EF%BC%93route-53%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%A7%E7%8B%AC%E8%87%AA%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%81%A7s3%E3%81%AEhtml%E3%82%92%E8%A1%A8%E7%A4%BA\"><i class=\"fa fa-link\"></i></a>３．Route 53の設定で独自ドメインでS3のhtmlを表示</h1>\n\n<p>　１．<a href=\"https://console.aws.amazon.com/route53/%E3%82%92%E9%96%8B%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://console.aws.amazon.com/route53/を開きます。</a><br>\n　２．[ホストゾーンの作成] を選択します。<br>\n　３．[ドメイン名]を入力します。<br>\n　４．タイプで[パブリックホストゾーン]を選択します。<br>\n　５．[ホストゾーンの作成]をクリックします。<br>\n　６．ホストゾーンが一つ登録されます。[ホストゾーン] → 登録した[ドメイン名] → [レコード作成]と進みます。<br>\n　７．レコード名に[www]<br>\n　　　レコードタイプに[A]<br>\n　　　エイリアスを[オン]<br>\n　　　トラフィックのルーティング先に<br>\n　　　[S3ウェブサイトエンドポイントへのエイリアス]<br>\n　　　[ap-northeast-1]<br>\n　　　S3の[パブリックウェブサイトエンドポイント]（前述手順２-８で使用したもの）を設定し<br>\n　　　他はデフォルトで[レコードを作成]をクリックします。<br>\n※AliasレコードはAWS独自のレコードでCNAMEレコードと似た機能が使えますがAWSのサービスを使う際にはCNAMEレコードよりもパフォーマンスの面で向上が見込めるものになります。詳しくは以下の記事を参照してみて下さい。<br>\n<a href=\"https://qiita.com/SwuBHj8aKGqBKHet/items/df9c567750166bdadd02#alias%E3%83%AC%E3%82%B3%E3%83%BC%E3%83%89\" id=\"reference-19170bb367d941fd0c52\">Aliasレコード</a></p>\n\n<h1>\n<span id=\"４お名前ドットコムのネームサーバを設定する\" class=\"fragment\"></span><a href=\"#%EF%BC%94%E3%81%8A%E5%90%8D%E5%89%8D%E3%83%89%E3%83%83%E3%83%88%E3%82%B3%E3%83%A0%E3%81%AE%E3%83%8D%E3%83%BC%E3%83%A0%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>４．お名前ドットコムのネームサーバを設定する</h1>\n\n<p>　　１．お名前ドットコムの管理画面にログインする。<br>\n　　２．メニューから[ドメイン]をクリック[ドメイン一覧]をクリックします。<br>\n　　３．変更するドメイン名をクリックします。<br>\n　　４．[ネームサーバの変更]をクリックします。<br>\n　　５．ここで一度Route 53の管理画面にいってNSレコード(ns-xxx.awsdns-xx.xxx)を４つコピーします。<br>\n　　６．お名前ドットコムの管理画面で２．ネームサーバの選択のところで[その他]を選択し[その他のネームサーバを使う]にチェックを入れ<br>\n　　　　NSレコードを１つずつコピーペーストしていきます。４つ目は＋ボタンを押すと追加できます。<br>\n　　７．[確認]ボタンをクリックししばらく待つとwww.example.comでS3の内容が表示されると思います。<br>\n　　　　（公式では反映まで２４時間〜７２時間とのことですが私の環境では３時間ほどで一回確認したら反映されていました。）</p>\n\n<h1>\n<span id=\"参考情報\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E6%83%85%E5%A0%B1\"><i class=\"fa fa-link\"></i></a>参考情報</h1>\n\n<p><a href=\"https://docs.aws.amazon.com/ja_jp/Route53/latest/DeveloperGuide/getting-started.html\" rel=\"nofollow noopener\" target=\"_blank\">Route 53の開始方法</a></p>\n",
    "body": "今回は静的サイトのテスト環境として設定していく手順のメモです。\n※コンソール画面の構成が変わりやすいので画面キャプチャは載せない形で書いてみました。(2021/8執筆)\n構成やボタンなどは同じものも多いので適宜似た単語などを探して進めてみてください。\n\nこのハンズオンを最後まで進めると\nお名前ドットコム　→ Route 53　→ S3の形式（http）で\n静的なサイト公開までが実現できます。\n\n# １．ドメインレジストラを決める\nドメインレジストラはお名前ドットコムにしました。AWSでも取得できますがここは好みで良いと思います。ドメインをまず取得します。\n# ２．S3バケットを作成します\nウェブサイトをS3で公開する場合はバケット名とウェブサイトのドメインを合わせる必要があります。今回はwww.example.comという前提で進めます。\n　１．S3コンソール画面から[バケットを作成]ボタンをクリックします。\n　２．バケット名にwww.example.comと入力\n　　　リージョンにap-northeast-1と入力\n　　　あとはとりあえずデフォルトで[バケットを作成]ボタンをクリックします。\n　３．ここからバケットの設定を進めます。作成した[バケット名]をクリックします。\n　４．[プロパティ]タブをクリックします。一番下の静的ウェブサイトホスティングの[編集]をクリックします。\n　　　[有効にする]にチェックを入れます。\n　　　インデックスドキュメントに[index.html]\n　　　エラードキュメントに[error.html]を入力します。\n　　　index.htmlはドメインにアクセスした時に表示されるトップページのhtmlファイル名\n　　　error.htmlは404エラーなどが起こった際に表示されるエラーページのhtmlファイル名で\n　　　後ほどこの名前でファイルを作成してアップロードします。\n　　　他の設定はデフォルトで[変更の保存]をクリックします。\n　５．index.htmlを作成しアップロードします。\n　　　S3コンソールからバケット名をクリックし[アップロード]ボタンを押します。\n　６．パブリックアクセスブロックの設定を解除します。\n　　　[アクセス許可]のタブからブロックパブリックアクセスの[編集]をクリックして\n　　　パブリックアクセスをすべてブロックを[オフ]に設定します。\n　７．バケットへのアクセス権（バケットポリシー）を編集します。\n　　　[アクセス許可]のタブをクリックします。\n　　　バケットポリシーの[編集]をクリックします。\n　　　まずバケットARNをコピーします。\n　　　ポリシージェネレータで以下のように設定します。\n　　　\n　　　バケットARNはコピーしたものを貼り付けます。\n　　　貼り付けたら/*を追加し、\"Resource\": \"arn:aws:s3:::www.example.com/*\",　のような形にします。\n　　　[Add Statement]　→　[Generate Policy]とクリックすると\n　　　yamlが生成されるのでそれをコピーします。\n　　　バケットポリシーの編集タブに戻ってポリシーの部分にyamlを貼り付けます。\n　　　Sidの項目を後でわかりやすいように書き換えておきます。\n　　　ここでは次の名前にしておきます。[PublicReadForGetBucketObjects]\n　　　※Sidはポリシー内でかぶっていなければ自由につけても良い識別子です。\n　８．[プロパティ]タブ最下部の[パブリックウェブサイトエンドポイント]のURLをクリックすると\n　　　ひとまずhtmlの内容がブラウザから見られるはずです。\n# ３．Route 53の設定で独自ドメインでS3のhtmlを表示\n　１．https://console.aws.amazon.com/route53/を開きます。\n　２．[ホストゾーンの作成] を選択します。\n　３．[ドメイン名]を入力します。\n　４．タイプで[パブリックホストゾーン]を選択します。\n　５．[ホストゾーンの作成]をクリックします。\n　６．ホストゾーンが一つ登録されます。[ホストゾーン] → 登録した[ドメイン名] → [レコード作成]と進みます。\n　７．レコード名に[www]\n　　　レコードタイプに[A]\n　　　エイリアスを[オン]\n　　　トラフィックのルーティング先に\n　　　[S3ウェブサイトエンドポイントへのエイリアス]\n　　　[ap-northeast-1]\n　　　S3の[パブリックウェブサイトエンドポイント]（前述手順２-８で使用したもの）を設定し\n　　　他はデフォルトで[レコードを作成]をクリックします。\n※AliasレコードはAWS独自のレコードでCNAMEレコードと似た機能が使えますがAWSのサービスを使う際にはCNAMEレコードよりもパフォーマンスの面で向上が見込めるものになります。詳しくは以下の記事を参照してみて下さい。\n[Aliasレコード](https://qiita.com/SwuBHj8aKGqBKHet/items/df9c567750166bdadd02#alias%E3%83%AC%E3%82%B3%E3%83%BC%E3%83%89)\n\n# ４．お名前ドットコムのネームサーバを設定する\n　　１．お名前ドットコムの管理画面にログインする。\n　　２．メニューから[ドメイン]をクリック[ドメイン一覧]をクリックします。\n　　３．変更するドメイン名をクリックします。\n　　４．[ネームサーバの変更]をクリックします。\n　　５．ここで一度Route 53の管理画面にいってNSレコード(ns-xxx.awsdns-xx.xxx)を４つコピーします。\n　　６．お名前ドットコムの管理画面で２．ネームサーバの選択のところで[その他]を選択し[その他のネームサーバを使う]にチェックを入れ\n　　　　NSレコードを１つずつコピーペーストしていきます。４つ目は＋ボタンを押すと追加できます。\n　　７．[確認]ボタンをクリックししばらく待つとwww.example.comでS3の内容が表示されると思います。\n　　　　（公式では反映まで２４時間〜７２時間とのことですが私の環境では３時間ほどで一回確認したら反映されていました。）\n\n# 参考情報\n[Route 53の開始方法](https://docs.aws.amazon.com/ja_jp/Route53/latest/DeveloperGuide/getting-started.html)\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T12:09:38+09:00",
    "group": null,
    "id": "ba44351f7853c06e6bbb",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "AWS",
        "versions": []
      },
      {
        "name": "S3",
        "versions": []
      },
      {
        "name": "route53",
        "versions": []
      }
    ],
    "title": "お名前ドットコム+AWS Route 53+S3でhttp静的サイト公開ハンズオン",
    "updated_at": "2021-08-25T12:09:38+09:00",
    "url": "https://qiita.com/SwuBHj8aKGqBKHet/items/ba44351f7853c06e6bbb",
    "user": {
      "description": "webデザインから入って割と広くやる人です。2020年はreact+redux(hooks),fiirebaseを触っていた年でした。21年はpython（Django）、AWS、typescriptなどを深掘りしたいです。前向きな人たちと繋がり、共に成長したい。修正依頼歓迎＆感謝します。",
      "facebook_id": "",
      "followees_count": 10,
      "followers_count": 9,
      "github_login_name": null,
      "id": "SwuBHj8aKGqBKHet",
      "items_count": 87,
      "linkedin_id": "",
      "location": "",
      "name": "",
      "organization": "",
      "permanent_id": 169482,
      "profile_image_url": "https://secure.gravatar.com/avatar/3fd1b992b6e4807be95a55626a4a0f8a",
      "team_only": false,
      "twitter_screen_name": null,
      "website_url": ""
    },
    "page_views_count": null,
    "team_membership": null
  },
  {
    "rendered_body": "\n<h2>\n<span id=\"キーバインド一覧を表示する\" class=\"fragment\"></span><a href=\"#%E3%82%AD%E3%83%BC%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E4%B8%80%E8%A6%A7%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>キーバインド一覧を表示する</h2>\n\n<ul>\n<li>「⌘ + k + ⌘ + s」</li>\n</ul>\n\n<h2>\n<span id=\"開いているフォルダを全部閉じる\" class=\"fragment\"></span><a href=\"#%E9%96%8B%E3%81%84%E3%81%A6%E3%81%84%E3%82%8B%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E5%85%A8%E9%83%A8%E9%96%89%E3%81%98%E3%82%8B\"><i class=\"fa fa-link\"></i></a>開いているフォルダを全部閉じる</h2>\n\n<ul>\n<li>「alt + ⌘ + 0」</li>\n</ul>\n\n<p>で開いているサイドバーのフォルダを全て閉じられるようにしました。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/b9f4092199e35e5c8596e88bbe32fa800d9f0104/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3335333536332f36643561346338382d636234622d383732332d336534622d3233363232626134333831392e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F353563%2F6d5a4c88-cb4b-8723-3e4b-23622ba43819.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f00518e17053d4e611f7c52f60b79a4e\" alt=\" 2021-08-25 at 12.10.00.jpg\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/353563/6d5a4c88-cb4b-8723-3e4b-23622ba43819.jpeg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F353563%2F6d5a4c88-cb4b-8723-3e4b-23622ba43819.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=6d7a880c8a10ae4895248a242778cbd6 1x\" loading=\"lazy\"></a></p>\n",
    "body": "\n## キーバインド一覧を表示する\n- 「⌘ + k + ⌘ + s」\n\n\n## 開いているフォルダを全部閉じる\n- 「alt + ⌘ + 0」\n\nで開いているサイドバーのフォルダを全て閉じられるようにしました。\n\n\n![ 2021-08-25 at 12.10.00.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/353563/6d5a4c88-cb4b-8723-3e4b-23622ba43819.jpeg)\n",
    "coediting": false,
    "comments_count": 0,
    "created_at": "2021-08-25T12:06:30+09:00",
    "group": null,
    "id": "0d6d417e7c13d818f6e6",
    "likes_count": 0,
    "private": false,
    "reactions_count": 0,
    "tags": [
      {
        "name": "VSCode",
        "versions": []
      }
    ],
    "title": "WIP: VsCode便利メモ",
    "updated_at": "2021-08-25T12:12:15+09:00",
    "url": "https://qiita.com/katuo0011/items/0d6d417e7c13d818f6e6",
    "user": {
      "description": "Software Engineer\r\n\r\nGoとNuxt.jsが好きです。Qiitaでは内容の浅いメモとしてのTIPS記事を量産していきます。個人ブログ・Twitterもやってます。",
      "facebook_id": "",
      "followees_count": 0,
      "followers_count": 3,
      "github_login_name": "katuo0011",
      "id": "katuo0011",
      "items_count": 23,
      "linkedin_id": "",
      "location": "東京",
      "name": "",
      "organization": "",
      "permanent_id": 353563,
      "profile_image_url": "https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/353563/65668f7f08749f73779bd2006f04cfcfca7cc83c/x_large.png?1625890283",
      "team_only": false,
      "twitter_screen_name": "katuo_ai",
      "website_url": "https://katuo-ai.com"
    },
    "page_views_count": null,
    "team_membership": null
  }
]
